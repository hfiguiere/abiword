dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/af/ev/xp/ev_Menu.h)
AC_CONFIG_AUX_DIR(ac-helpers)

AM_INIT_AUTOMAKE(abiword,7,13)

dnl APR [ Apache Portable Runtime ] does it this way, but I don't know
dnl why.  I figure they probably have a good reason. 

abs_builddir=`pwd`
abs_srcdir="`cd $srcdir && pwd`"

if test -n "$BUILD_BASE"; then
  top_builddir="$BUILD_BASE"
else
  top_builddir="$abs_builddir"
fi
AC_SUBST(top_builddir)


dnl Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_ISC_POSIX
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AM_ACLOCAL_INCLUDE(macros)


dnl It would be nice to eventually add -Werror
dnl FIXME these flags are gcc-specific, and need to be fixed
WARNING_CFLAGS="-Wall -pedantic -ansi -D_POSIX_SOURCE -D_BSD_SOURCE -pipe"
AC_SUBST(WARNING_CFLAGS)

dnl Checks for libraries.
# Make sure that we have glib>=1.1.16
dnl AM_PATH_GLIB(1.2.0)
GMODULE_CFLAGS=`glib-config --cflags gmodule`
AC_SUBST(GMODULE_CFLAGS)
GMODULE_LIBS=`glib-config --libs gmodule`
AC_SUBST(GMODULE_LIBS)

dnl AM_PATH_GTK(1.2.0)
GTK_CFLAGS=`gtk-config --cflags`
AC_SUBST(GTK_CFLAGS)
GTK_LIBS=`gtk-config --libs`
AC_SUBST(GTK_LIBS)

GNOME_CFLAGS=`gnome-config --cflags gnomeui`
GNOME_CFLAGS="$GNOME_CFLAGS -DHAVE_GNOME"
AC_SUBST(GNOME_CFLAGS)
GNOME_LIBS="-lgnomeui -lgnomeprint -lgal -lart_lgpl -lgdk_imlib -lgnome -lgnomesupport -lxml -lunicode -lglade-gnome -lglade -lgnomecanvaspixbuf -lgdk_pixbuf -ltiff -ljpeg"
AC_SUBST(GNOME_LIBS)

ICONV_INCLUDES=-I'$(top_srcdir)/../iconv'
AC_SUBST(ICONV_INCLUDES)



dnl quick hack - will detect this
PLATFORM=unix
AC_SUBST(PLATFORM)

dnl ******************************
dnl gtk+ checking
dnl ******************************
AC_MSG_CHECKING(for GTK >= 1.2.2)
if gtk-config --version > /dev/null 2>&1; then 
    dnl We need the "%d" in order not to get e-notation on hpux.
    vers=`gtk-config --version | awk 'BEGIN { FS = "."; } { printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
    if test "$vers" -ge 1002002; then
        AC_MSG_RESULT(found)
    else
        AC_MSG_ERROR(You need at least GTK+ 1.2.2 for this version of AbiWord)
    fi
else
    AC_MSG_ERROR(Did not find GTK+ installed)
fi

dnl GNOME_INIT

ABIWORD_APP_NAME="AbiWord"
AC_SUBST(ABIWORD_APP_NAME)
ABIWORD_APP_LIBDIR="AbiWord"
AC_SUBST(ABIWORD_APP_LIBDIR)

dnl ./configure command line arguments
dnl curretnly, we have:
dnl   --enable-gnome
dnl   --enable-debug
dnl   --enable-extra-optimization
dnl   --enable-profile
dnl   --with-pspell
dnl   --with-libxml2
dnl The defined values are used mostly in includes.mk, but also in
dnl some other places

AC_ARG_ENABLE(debug,
    [  --enable-debug    Turn on debugging],
     [case "${enableval}" in
       yes) debug=true ;
	    DEBUG_CFLAGS="-DDEBUG -DUT_DEBUG -DFMT_TEST -DUT_TEST -DPT_TEST -g" ;;
       no)  debug=false ;
	    DEBUG_CFLAGS="-DNDEBUG" ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
     esac],[debug=false])
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

AC_ARG_ENABLE(gnome,
    [  --enable-gnome    Turn on gnome ],
     [case "${enableval}" in
       yes) gnome=true ;;
       no)  gnome=false ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-gnome) ;;
     esac],[gnome=false])
AM_CONDITIONAL(WITH_GNOME, test x$gnome = xtrue)

AC_ARG_WITH(pspell,
    [  --with-pspell    Turn on pspell ],
     [case "${withval}" in
       yes) PSPELL_LIBS="-lpspell -lltdl" ;
            pspell=true ;;
       no)  PSPELL_LIBS="" ;
	    pspell=false ;;
       *) AC_MSG_ERROR(bad value ${withval} for --with-pspell) ;;
     esac],[PSPELL_LIBS=""])
AM_CONDITIONAL(WITH_PSPELL, test x$pspell = xtrue)

AC_ARG_ENABLE(profile,
    [  --enable-profile    Turn on profile ],
     [case "${enableval}" in
       yes) PROFILE_CFLAGS="-pg -fprofile-arcs -ftest-coverage" ;;
       no)  PROFILE_CFLAGS="" ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-profile) ;;
     esac],[PROFILE_CFLAGS=""])

AC_ARG_ENABLE(extra-optimization,
    [  --enable-extra-optimization    Turn on extra optimizations ],
     [case "${enableval}" in
       yes) OPTIMIZE_CFLAGS="-O3" ;;
       no)  OPTIMIZE_CFLAGS="-O2" ;; 
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-extra-optimization) ;;
     esac],[OPTIMIZE_CFLAGS=""])

AC_ARG_ENABLE(bidi,
    [  --enable-bidi    Turn on bidirectional support ],
     [case "${enableval}" in
       yes) BIDI_CFLAGS="-DBIDI_ENABLED" ;;
       no)  BIDI_CFLAGS="" ;; 
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-bidi) ;;
     esac],[BIDI_CFLAGS=""])

AC_ARG_ENABLE(scripting,
    [  --enable-scripting   Enable the perl scripting interface ],
     [case "${enableval}" in
       yes) script=true ;;
       no)  script=false ;; 
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-scripting) ;;
     esac],[script=false])

dnl this isn't actually used anywhere, but we provide it anyway
AM_CONDITIONAL(SCRIPT, test x$script = xtrue)

case "$script" in
     "true" ) 
	    SCRIPT_CFLAGS="-DABI_OPT_JS `perl -MExtUtils::Embed -e ccopts` -Ubool"
	    SCRIPT_LIBS="`perl -MExtUtils::Embed -e ldopts`"
	    ;;
     * )     
    	    SCRIPT_CFLAGS=""
	    SCRIPT_LIBS=""
	    ;;
esac

dnl SUBST all the variables we just defined
AC_SUBST(OPTIMIZE_CFLAGS)
AC_SUBST(PROFILE_CFLAGS)
AC_SUBST(PSPELL_LIBS)
AC_SUBST(DEBUG_CFLAGS)
AC_SUBST(SCRIPT_CFLAGS)
AC_SUBST(SCRIPT_LIBS)
AC_SUBST(BIDI_CFLAGS)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(limits.h strings.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T


dnl check for an xml parser

ABI_NEED_XML_PARSER="yes"
ABI_XML_PARSER(${srcdir}/../expat)



dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(re_comp regcomp strdup strstr)

AC_OUTPUT(
 GNUmakefile
 src/GNUmakefile
 src/af/GNUmakefile
 src/af/ev/GNUmakefile
 src/af/ev/xp/GNUmakefile
 src/af/ev/unix/GNUmakefile
 src/af/ev/unix/gnome/GNUmakefile
 src/af/gr/GNUmakefile
 src/af/gr/xp/GNUmakefile
 src/af/gr/unix/GNUmakefile
 src/af/util/GNUmakefile
 src/af/util/xp/GNUmakefile
 src/af/util/unix/GNUmakefile
 src/af/xap/GNUmakefile
 src/af/xap/xp/GNUmakefile
 src/af/xap/unix/GNUmakefile
 src/af/xap/unix/gnome/GNUmakefile
 src/other/GNUmakefile
 src/other/spell/GNUmakefile
 src/other/spell/xp/GNUmakefile
 src/text/GNUmakefile
 src/text/fmt/GNUmakefile
 src/text/fmt/xp/GNUmakefile
 src/text/ptbl/GNUmakefile
 src/text/ptbl/xp/GNUmakefile
 src/wp/GNUmakefile
 src/wp/ap/GNUmakefile
 src/wp/ap/xp/GNUmakefile
 src/wp/ap/unix/GNUmakefile
 src/wp/ap/unix/gnome/GNUmakefile
 src/wp/impexp/GNUmakefile
 src/wp/impexp/xp/GNUmakefile
 src/wp/main/GNUmakefile
 src/wp/main/xp/GNUmakefile
 src/wp/main/unix/GNUmakefile
 src/wp/main/unix/gnome/GNUmakefile
 src/tools/GNUmakefile
 src/tools/cdump/GNUmakefile
 src/tools/cdump/xp/GNUmakefile
)

echo " "

case "$PLATFORM" in
     "unix" )
       AC_MSG_RESULT([Configured to build on a Unix/Linux platform.]) ;;
     "win" )
       AC_MSG_RESULT([Configured to build on a Windows platform.]) ;;
     "beos" )
       AC_MSG_RESULT([Configured to build on a BeOS platform.]) ;;
     "qnx" )
       AC_MSG_RESULT([Configured to build on a QNX RTOS platform.]) ;;
     "mac" )
       AC_MSG_RESULT([Configured to build on a Mac OS X platform.]) ;;
esac

case "$gnome" in
     "true" )
        AC_MSG_RESULT([Configured with GNOME support.]) ;;
esac

case "$pspell" in
     "true" )
        AC_MSG_RESULT([Configured with Pspell support.]) ;;
esac

case "$debug" in
     "true" )
        AC_MSG_RESULT([Configured with debugging symbols.]) ;;
esac

case "$script" in
     "true" )
        AC_MSG_RESULT([Configured with scripting support.]) ;;
esac

cat <<EOF
  XML Parser:      ${abi_xml_parser_message}
EOF

AC_MSG_RESULT([Type make to build AbiWord.])









