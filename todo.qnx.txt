./af/ev/qnx/ev_QNXKeyboard.cpp-434-}
./af/ev/qnx/ev_QNXKeyboard.cpp-435-
./af/ev/qnx/ev_QNXKeyboard.cpp-436-static int s_getKeyEventValue(PhKeyEvent_t *keyevent) {
./af/ev/qnx/ev_QNXKeyboard.cpp-437-	int key;
./af/ev/qnx/ev_QNXKeyboard.cpp-438-
./af/ev/qnx/ev_QNXKeyboard.cpp:439:	//TODO: Make this more international!
./af/ev/qnx/ev_QNXKeyboard.cpp-440-	if ((key = PhTo8859_1(keyevent)) == -1) {
./af/ev/qnx/ev_QNXKeyboard.cpp-441-		return(EV_NVK__IGNORE__);
./af/ev/qnx/ev_QNXKeyboard.cpp-442-	}
./af/ev/qnx/ev_QNXKeyboard.cpp-443-	return(key);
./af/ev/qnx/ev_QNXKeyboard.cpp-444-}
./af/ev/qnx/ev_QNXMenu.cpp-219-			return Pt_CONTINUE;
./af/ev/qnx/ev_QNXMenu.cpp-220-		}
./af/ev/qnx/ev_QNXMenu.cpp-221-
./af/ev/qnx/ev_QNXMenu.cpp-222-		const char * szMsg = pLabel->getMenuStatusMessage();
./af/ev/qnx/ev_QNXMenu.cpp-223-		if (!szMsg || !*szMsg) {
./af/ev/qnx/ev_QNXMenu.cpp:224:			szMsg = "TODO This menu item doesn't have a StatusMessage defined.";
./af/ev/qnx/ev_QNXMenu.cpp-225-		}
./af/ev/qnx/ev_QNXMenu.cpp-226-	
./af/ev/qnx/ev_QNXMenu.cpp-227-		pFrame->setStatusMessage(szMsg);
./af/ev/qnx/ev_QNXMenu.cpp-228-		return Pt_CONTINUE;
./af/ev/qnx/ev_QNXMenu.cpp-229-}
./af/ev/qnx/ev_QNXMenu.cpp-490-	flags =  (enabled == UT_TRUE) ? Pt_SELECTABLE : (Pt_BLOCKED | Pt_GHOST)  ;
./af/ev/qnx/ev_QNXMenu.cpp-491-	flags |= (checked == UT_TRUE) ? Pt_SET : 0;
./af/ev/qnx/ev_QNXMenu.cpp-492-	PtSetResource(w, Pt_ARG_FLAGS, flags, Pt_BLOCKED | Pt_GHOST | Pt_SET | Pt_SELECTABLE);
./af/ev/qnx/ev_QNXMenu.cpp-493-}
./af/ev/qnx/ev_QNXMenu.cpp-494-
./af/ev/qnx/ev_QNXMenu.cpp:495://TODO: This code gets called way too often, or maybe we need to be able
./af/ev/qnx/ev_QNXMenu.cpp-496-//      to whip through all of the non-relevant widgets more quickly.  In
./af/ev/qnx/ev_QNXMenu.cpp:497://      any case it is on the TODO list.
./af/ev/qnx/ev_QNXMenu.cpp-498-UT_Bool EV_QNXMenu::_refreshMenu(AV_View * pView, void * wMenuRoot)
./af/ev/qnx/ev_QNXMenu.cpp-499-{
./af/ev/qnx/ev_QNXMenu.cpp-500-	PtWidget_t *item, *wParent;
./af/ev/qnx/ev_QNXMenu.cpp-501-
./af/ev/qnx/ev_QNXMenu.cpp-502-	// update the status of stateful items on menu bar.
./af/ev/qnx/ev_QNXMenu.cpp-708-{
./af/ev/qnx/ev_QNXMenu.cpp-709-	if (m_wMenuBar) {
./af/ev/qnx/ev_QNXMenu.cpp-710-		PtDestroyWidget(m_wMenuBar);
./af/ev/qnx/ev_QNXMenu.cpp-711-	}
./af/ev/qnx/ev_QNXMenu.cpp-712-	m_wMenuBar = NULL;
./af/ev/qnx/ev_QNXMenu.cpp:713:	//TODO: Keep track of our alloced strucutres and free them too
./af/ev/qnx/ev_QNXMenu.cpp-714-}
./af/ev/qnx/ev_QNXMenu.cpp-715-
./af/ev/qnx/ev_QNXMenu.cpp-716-UT_Bool EV_QNXMenuBar::synthesizeMenuBar(void)
./af/ev/qnx/ev_QNXMenu.cpp-717-{
./af/ev/qnx/ev_QNXMenu.cpp-718-    PtArg_t args[10];
./af/ev/qnx/ev_QNXMenu.cpp-764-{
./af/ev/qnx/ev_QNXMenu.cpp-765-	if (m_wMenuPopup) {
./af/ev/qnx/ev_QNXMenu.cpp-766-		PtDestroyWidget(m_wMenuPopup);
./af/ev/qnx/ev_QNXMenu.cpp-767-	}
./af/ev/qnx/ev_QNXMenu.cpp-768-	m_wMenuPopup = NULL;
./af/ev/qnx/ev_QNXMenu.cpp:769:	//TODO: Keep track of our alloced strucutres and free them too
./af/ev/qnx/ev_QNXMenu.cpp-770-}
./af/ev/qnx/ev_QNXMenu.cpp-771-
./af/ev/qnx/ev_QNXMenu.cpp-772-PtWidget_t * EV_QNXMenuPopup::getMenuHandle(void) const
./af/ev/qnx/ev_QNXMenu.cpp-773-{
./af/ev/qnx/ev_QNXMenu.cpp-774-	return m_wMenuPopup;
./af/ev/qnx/ev_QNXMouse.cpp-15- * along with this program; if not, write to the Free Software
./af/ev/qnx/ev_QNXMouse.cpp-16- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  
./af/ev/qnx/ev_QNXMouse.cpp-17- * 02111-1307, USA.
./af/ev/qnx/ev_QNXMouse.cpp-18- */
./af/ev/qnx/ev_QNXMouse.cpp-19-
./af/ev/qnx/ev_QNXMouse.cpp:20:// TODO see if we need to do the GTK absolute-to-relative coordinate
./af/ev/qnx/ev_QNXMouse.cpp:21:// TODO trick like we did in the top ruler.
./af/ev/qnx/ev_QNXMouse.cpp-22-
./af/ev/qnx/ev_QNXMouse.cpp-23-#include "ut_assert.h"
./af/ev/qnx/ev_QNXMouse.cpp-24-#include "ut_debugmsg.h"
./af/ev/qnx/ev_QNXMouse.cpp-25-#include "ut_types.h"
./af/ev/qnx/ev_QNXMouse.cpp-26-#include "ev_Mouse.h"
./af/ev/qnx/ev_QNXMouse.cpp-86-	else if (ptrevent->buttons & Ph_BUTTON_2)
./af/ev/qnx/ev_QNXMouse.cpp-87-		emb = EV_EMB_BUTTON2;
./af/ev/qnx/ev_QNXMouse.cpp-88-	else if (ptrevent->buttons & Ph_BUTTON_1)
./af/ev/qnx/ev_QNXMouse.cpp-89-		emb = EV_EMB_BUTTON3;
./af/ev/qnx/ev_QNXMouse.cpp-90-
./af/ev/qnx/ev_QNXMouse.cpp:91:	// TODO confirm that we report release under the
./af/ev/qnx/ev_QNXMouse.cpp:92:	// TODO mouse button that we did the capture on.
./af/ev/qnx/ev_QNXMouse.cpp-93-
./af/ev/qnx/ev_QNXMouse.cpp-94-	mop = EV_EMO_RELEASE;
./af/ev/qnx/ev_QNXMouse.cpp-95-	if (m_clickState == EV_EMO_DOUBLECLICK)
./af/ev/qnx/ev_QNXMouse.cpp-96-		mop = EV_EMO_DOUBLERELEASE;
./af/ev/qnx/ev_QNXMouse.cpp-97-	m_clickState = 0;
./af/ev/qnx/ev_QNXMouse.cpp-111-	case EV_EEMR_INCOMPLETE:
./af/ev/qnx/ev_QNXMouse.cpp-112-		// I'm not sure this makes any sense, but we allow it.
./af/ev/qnx/ev_QNXMouse.cpp-113-		return;
./af/ev/qnx/ev_QNXMouse.cpp-114-	case EV_EEMR_BOGUS_START:
./af/ev/qnx/ev_QNXMouse.cpp-115-	case EV_EEMR_BOGUS_CONT:
./af/ev/qnx/ev_QNXMouse.cpp:116:		// TODO What to do ?? Should we beep at them or just be quiet ??
./af/ev/qnx/ev_QNXMouse.cpp-117-		return;
./af/ev/qnx/ev_QNXMouse.cpp-118-	default:
./af/ev/qnx/ev_QNXMouse.cpp-119-		UT_ASSERT(0);
./af/ev/qnx/ev_QNXMouse.cpp-120-		return;
./af/ev/qnx/ev_QNXMouse.cpp-121-	}
./af/ev/qnx/ev_QNXMouse.cpp-152-	else if (ptrevent->buttons & Ph_BUTTON_2)
./af/ev/qnx/ev_QNXMouse.cpp-153-		emb = EV_EMB_BUTTON2;
./af/ev/qnx/ev_QNXMouse.cpp-154-	else if (ptrevent->buttons & Ph_BUTTON_1)
./af/ev/qnx/ev_QNXMouse.cpp-155-		emb = EV_EMB_BUTTON3;
./af/ev/qnx/ev_QNXMouse.cpp-156-	else {
./af/ev/qnx/ev_QNXMouse.cpp:157:		// TODO decide something better to do here....
./af/ev/qnx/ev_QNXMouse.cpp-158-		UT_DEBUGMSG(("EV_QNXMouse::mouseClick: unknown button %d", ptrevent->buttons));
./af/ev/qnx/ev_QNXMouse.cpp-159-		return;
./af/ev/qnx/ev_QNXMouse.cpp-160-	}
./af/ev/qnx/ev_QNXMouse.cpp-161-
./af/ev/qnx/ev_QNXMouse.cpp-162-	if (ptrevent->click_count == 1)
./af/ev/qnx/ev_QNXMouse.cpp-163-		mop = EV_EMO_SINGLECLICK;
./af/ev/qnx/ev_QNXMouse.cpp-164-	else if (ptrevent->click_count == 2)
./af/ev/qnx/ev_QNXMouse.cpp-165-		mop = EV_EMO_DOUBLECLICK;
./af/ev/qnx/ev_QNXMouse.cpp-166-	else
./af/ev/qnx/ev_QNXMouse.cpp-167-	{
./af/ev/qnx/ev_QNXMouse.cpp:168:		// TODO decide something better to do here....
./af/ev/qnx/ev_QNXMouse.cpp-169-		UT_DEBUGMSG(("EV_QNXMouse::mouseClick:: unknown type %d", ptrevent->click_count));
./af/ev/qnx/ev_QNXMouse.cpp-170-		return;
./af/ev/qnx/ev_QNXMouse.cpp-171-	}
./af/ev/qnx/ev_QNXMouse.cpp-172-
./af/ev/qnx/ev_QNXMouse.cpp-173-	emc = pView->getMouseContext((UT_sint32)mx,
./af/ev/qnx/ev_QNXMouse.cpp-189-	case EV_EEMR_INCOMPLETE:
./af/ev/qnx/ev_QNXMouse.cpp-190-		// I'm not sure this makes any sense, but we allow it.
./af/ev/qnx/ev_QNXMouse.cpp-191-		return;
./af/ev/qnx/ev_QNXMouse.cpp-192-	case EV_EEMR_BOGUS_START:
./af/ev/qnx/ev_QNXMouse.cpp-193-	case EV_EEMR_BOGUS_CONT:
./af/ev/qnx/ev_QNXMouse.cpp:194:		// TODO What to do ?? Should we beep at them or just be quiet ??
./af/ev/qnx/ev_QNXMouse.cpp-195-		return;
./af/ev/qnx/ev_QNXMouse.cpp-196-	default:
./af/ev/qnx/ev_QNXMouse.cpp-197-		UT_ASSERT(0);
./af/ev/qnx/ev_QNXMouse.cpp-198-		return;
./af/ev/qnx/ev_QNXMouse.cpp-199-	}
./af/ev/qnx/ev_QNXMouse.cpp-232-	else if (ptrevent->buttons & Ph_BUTTON_1)
./af/ev/qnx/ev_QNXMouse.cpp-233-		emb = EV_EMB_BUTTON3;
./af/ev/qnx/ev_QNXMouse.cpp-234-	else
./af/ev/qnx/ev_QNXMouse.cpp-235-		emb = EV_EMB_BUTTON0;
./af/ev/qnx/ev_QNXMouse.cpp-236-
./af/ev/qnx/ev_QNXMouse.cpp:237:	// TODO confirm that we report movements under the
./af/ev/qnx/ev_QNXMouse.cpp:238:	// TODO mouse button that we did the capture on.
./af/ev/qnx/ev_QNXMouse.cpp-239-
./af/ev/qnx/ev_QNXMouse.cpp-240-	if (m_clickState == 0)
./af/ev/qnx/ev_QNXMouse.cpp-241-	{
./af/ev/qnx/ev_QNXMouse.cpp-242-		mop = EV_EMO_DRAG;
./af/ev/qnx/ev_QNXMouse.cpp-243-		emc = pView->getMouseContext((UT_sint32)mx,
./af/ev/qnx/ev_QNXMouse.cpp-272-	case EV_EEMR_INCOMPLETE:
./af/ev/qnx/ev_QNXMouse.cpp-273-		// I'm not sure this makes any sense, but we allow it.
./af/ev/qnx/ev_QNXMouse.cpp-274-		return;
./af/ev/qnx/ev_QNXMouse.cpp-275-	case EV_EEMR_BOGUS_START:
./af/ev/qnx/ev_QNXMouse.cpp-276-	case EV_EEMR_BOGUS_CONT:
./af/ev/qnx/ev_QNXMouse.cpp:277:		// TODO What to do ?? Should we beep at them or just be quiet ??
./af/ev/qnx/ev_QNXMouse.cpp-278-		return;
./af/ev/qnx/ev_QNXMouse.cpp-279-	default:
./af/ev/qnx/ev_QNXMouse.cpp-280-		UT_ASSERT(UT_SHOULD_NOT_HAPPEN);
./af/ev/qnx/ev_QNXMouse.cpp-281-		return;
./af/ev/qnx/ev_QNXMouse.cpp-282-	}
./af/ev/qnx/ev_QNXToolbar.cpp-227-			switch (pAction->getItemType())
./af/ev/qnx/ev_QNXToolbar.cpp-228-			{
./af/ev/qnx/ev_QNXToolbar.cpp-229-			case EV_TBIT_PushButton:
./af/ev/qnx/ev_QNXToolbar.cpp-230-				{
./af/ev/qnx/ev_QNXToolbar.cpp-231-
./af/ev/qnx/ev_QNXToolbar.cpp:232:					//TODO: Add the tool tip (szToolTip), text label
./af/ev/qnx/ev_QNXToolbar.cpp-233-					image = m_pQNXToolbarIcons->getPixmapForIcon(pLabel->getIconName());
./af/ev/qnx/ev_QNXToolbar.cpp-234-					if (image && PhMakeGhostBitmap(image) == -1) {
./af/ev/qnx/ev_QNXToolbar.cpp-235-						printf("Can't make ghost bitmap \n");
./af/ev/qnx/ev_QNXToolbar.cpp-236-					}
./af/ev/qnx/ev_QNXToolbar.cpp-237-					else {
./af/ev/qnx/ev_QNXToolbar.cpp-574-					PtSetArg(&args[n++], Pt_ARG_LIST_FLAGS, 
./af/ev/qnx/ev_QNXToolbar.cpp-575-							 (bGrayed) ? Pt_LIST_INACTIVE : 0, 
./af/ev/qnx/ev_QNXToolbar.cpp-576-							 Pt_LIST_INACTIVE); 
./af/ev/qnx/ev_QNXToolbar.cpp-577-
./af/ev/qnx/ev_QNXToolbar.cpp-578-					if (!szState) {
./af/ev/qnx/ev_QNXToolbar.cpp:579:						UT_DEBUGMSG(("TODO: Determine why state is NULL "));
./af/ev/qnx/ev_QNXToolbar.cpp-580-					}
./af/ev/qnx/ev_QNXToolbar.cpp-581-
./af/ev/qnx/ev_QNXToolbar.cpp-582-					//printf("State [%s] \n", (szState) ? szState : "NULL");
./af/ev/qnx/ev_QNXToolbar.cpp-583-					if (szState && !(top = PtListItemPos(tcb->m_widget, szState))) {
./af/ev/qnx/ev_QNXToolbar.cpp-584-						//Assume this is the case of Times New Roman not being found
./af/gr/qnx/gr_QNXGraphics.cpp-218-	DRAW_END
./af/gr/qnx/gr_QNXGraphics.cpp-219-}
./af/gr/qnx/gr_QNXGraphics.cpp-220-
./af/gr/qnx/gr_QNXGraphics.cpp-221-void GR_QNXGraphics::drawChar(UT_UCSChar Char, UT_sint32 xoff, UT_sint32 yoff)
./af/gr/qnx/gr_QNXGraphics.cpp-222-{
./af/gr/qnx/gr_QNXGraphics.cpp:223:	//TODO: Speed this up by putting it in its own function
./af/gr/qnx/gr_QNXGraphics.cpp-224-	drawChars(&Char, 0, 1, xoff, yoff);
./af/gr/qnx/gr_QNXGraphics.cpp-225-}
./af/gr/qnx/gr_QNXGraphics.cpp-226-
./af/gr/qnx/gr_QNXGraphics.cpp-227-
./af/gr/qnx/gr_QNXGraphics.cpp-228-void GR_QNXGraphics::setFont(GR_Font * pFont)
./af/gr/qnx/gr_QNXGraphics.cpp-301-				  buffer,	   	/* Buffer to hit */
./af/gr/qnx/gr_QNXGraphics.cpp-302-				  font, 		/* Font buffer uses */
./af/gr/qnx/gr_QNXGraphics.cpp-303-				  &indices,		/* Where to get pen pos from */
./af/gr/qnx/gr_QNXGraphics.cpp-304-				  &penpos, 		/* Where to store pen pos */
./af/gr/qnx/gr_QNXGraphics.cpp-305-				  1,			/* Number of indices */
./af/gr/qnx/gr_QNXGraphics.cpp:306:				  0,			/* Flags TODO: PF_WIDE_CHARS and save convert? */
./af/gr/qnx/gr_QNXGraphics.cpp-307-				  len,			/* Length of buffer (0 = use strlen) */
./af/gr/qnx/gr_QNXGraphics.cpp-308-				  0, 			/* Number of characters to skip */
./af/gr/qnx/gr_QNXGraphics.cpp-309-				  NULL);		/* Clipping rectangle? */
./af/gr/qnx/gr_QNXGraphics.cpp-310-#if 0
./af/gr/qnx/gr_QNXGraphics.cpp-311-	printf("%s : %s gives width %d \n", font, buffer, penpos);
./af/gr/qnx/gr_QNXGraphics.cpp-437-}
./af/gr/qnx/gr_QNXGraphics.cpp-438-
./af/gr/qnx/gr_QNXGraphics.cpp-439-void GR_QNXGraphics::drawLine(UT_sint32 x1, UT_sint32 y1,
./af/gr/qnx/gr_QNXGraphics.cpp-440-			      UT_sint32 x2, UT_sint32 y2)
./af/gr/qnx/gr_QNXGraphics.cpp-441-{
./af/gr/qnx/gr_QNXGraphics.cpp:442:	// TODO set the line width according to m_iLineWidth
./af/gr/qnx/gr_QNXGraphics.cpp-443-	DRAW_START
./af/gr/qnx/gr_QNXGraphics.cpp-444-	PgSetFillColor(m_currentColor);
./af/gr/qnx/gr_QNXGraphics.cpp-445-	PgSetStrokeColor(m_currentColor);
./af/gr/qnx/gr_QNXGraphics.cpp-446-	PgSetStrokeWidth(m_iLineWidth);
./af/gr/qnx/gr_QNXGraphics.cpp-447-	PgDrawILine(x1, y1, x2, y2);
./af/gr/qnx/gr_QNXGraphics.cpp-800-
./af/gr/qnx/gr_QNXGraphics.cpp-801-	GdkCursor * cursor = gdk_cursor_new(cursor_number);
./af/gr/qnx/gr_QNXGraphics.cpp-802-	gdk_window_set_cursor(m_pWin, cursor);
./af/gr/qnx/gr_QNXGraphics.cpp-803-	gdk_cursor_destroy(cursor);
./af/gr/qnx/gr_QNXGraphics.cpp-804-#else
./af/gr/qnx/gr_QNXGraphics.cpp:805:	UT_DEBUGMSG(("TODO: Set the cursor type "));
./af/gr/qnx/gr_QNXGraphics.cpp-806-#endif
./af/gr/qnx/gr_QNXGraphics.cpp-807-}
./af/gr/qnx/gr_QNXGraphics.cpp-808-
./af/gr/qnx/gr_QNXGraphics.cpp-809-GR_Graphics::Cursor GR_QNXGraphics::getCursor(void) const
./af/gr/qnx/gr_QNXGraphics.cpp-810-{
./af/gr/qnx/gr_QNXImage.cpp-140-	png_write_info(png_ptr, info_ptr);
./af/gr/qnx/gr_QNXImage.cpp-141-
./af/gr/qnx/gr_QNXImage.cpp-142-	UT_Byte * pBits = ((unsigned char*) m_image->data);
./af/gr/qnx/gr_QNXImage.cpp-143-	
./af/gr/qnx/gr_QNXImage.cpp-144-	UT_Byte* pData = (UT_Byte*) malloc(iWidth * iHeight * 3);
./af/gr/qnx/gr_QNXImage.cpp:145:	UT_ASSERT(pData); // TODO outofmem
./af/gr/qnx/gr_QNXImage.cpp-146-		
./af/gr/qnx/gr_QNXImage.cpp-147-	UT_uint32 	iRow;
./af/gr/qnx/gr_QNXImage.cpp-148-	UT_uint32 	iCol;
./af/gr/qnx/gr_QNXImage.cpp-149-	UT_Byte* 	pRow;
./af/gr/qnx/gr_QNXImage.cpp-150-	UT_uint32 	iBytesInRow;
./af/gr/qnx/gr_QNXImage.cpp-326-		}
./af/gr/qnx/gr_QNXImage.cpp-327-
./af/gr/qnx/gr_QNXImage.cpp-328-		// stretch the pixels from pOtherFM into pDisplayFM
./af/gr/qnx/gr_QNXImage.cpp-329-
./af/gr/qnx/gr_QNXImage.cpp-330-		/*
./af/gr/qnx/gr_QNXImage.cpp:331:		  TODO this code came from imlib.  It's not exactly
./af/gr/qnx/gr_QNXImage.cpp-332-		  a match for our coding standards, so it needs a
./af/gr/qnx/gr_QNXImage.cpp-333-		  certain amount of cleanup.  However, it seems
./af/gr/qnx/gr_QNXImage.cpp-334-		  to be working nicely.
./af/gr/qnx/gr_QNXImage.cpp-335-		*/
./af/gr/qnx/gr_QNXImage.cpp-336-		
./af/gr/qnx/gr_QNXImage.cpp-341-
./af/gr/qnx/gr_QNXImage.cpp-342-			xarray = (int*) malloc(sizeof(int) * iDisplayWidth);
./af/gr/qnx/gr_QNXImage.cpp-343-
./af/gr/qnx/gr_QNXImage.cpp-344-			if (!xarray)
./af/gr/qnx/gr_QNXImage.cpp-345-			{
./af/gr/qnx/gr_QNXImage.cpp:346:				// TODO outofmem
./af/gr/qnx/gr_QNXImage.cpp-347-				return UT_FALSE;
./af/gr/qnx/gr_QNXImage.cpp-348-			}
./af/gr/qnx/gr_QNXImage.cpp-349-			yarray = (unsigned char**) malloc(sizeof(unsigned char *) * iDisplayHeight);
./af/gr/qnx/gr_QNXImage.cpp-350-
./af/gr/qnx/gr_QNXImage.cpp-351-			if (!yarray)
./af/gr/qnx/gr_QNXImage.cpp-352-			{
./af/gr/qnx/gr_QNXImage.cpp:353:				// TODO outofmem
./af/gr/qnx/gr_QNXImage.cpp-354-				return UT_FALSE;
./af/gr/qnx/gr_QNXImage.cpp-355-			}
./af/gr/qnx/gr_QNXImage.cpp-356-			
./af/gr/qnx/gr_QNXImage.cpp-357-			ptr22 = pOtherFM->data;
./af/gr/qnx/gr_QNXImage.cpp-358-			w3 = pOtherFM->width * 3;
./af/util/qnx/ut_Xpm2Bitmap.cpp-128-			//pRGB[k]	= B_TRANSPARENT_32_BIT;
./af/util/qnx/ut_Xpm2Bitmap.cpp-129-			pRGB[k]	= Pg_GREY;
./af/util/qnx/ut_Xpm2Bitmap.cpp-130-		}
./af/util/qnx/ut_Xpm2Bitmap.cpp-131-		else
./af/util/qnx/ut_Xpm2Bitmap.cpp-132-		{
./af/util/qnx/ut_Xpm2Bitmap.cpp:133:			// TODO fix this to also handle 
./af/util/qnx/ut_Xpm2Bitmap.cpp-134-			// #ffffeeeedddd type color references
./af/util/qnx/ut_Xpm2Bitmap.cpp-135-			UT_ASSERT((bufColorValue[0] == '#') && strlen(bufColorValue)==7);
./af/util/qnx/ut_Xpm2Bitmap.cpp-136-			UT_parseColor(bufColorValue, color);
./af/util/qnx/ut_Xpm2Bitmap.cpp-137-			pRGB[k] = PgRGB(color.m_red, color.m_grn, color.m_blu);
./af/util/qnx/ut_Xpm2Bitmap.cpp-138-		}
./af/xap/qnx/xap_QNXApp.cpp-98-
./af/xap/qnx/xap_QNXApp.cpp-99-void XAP_QNXApp::setGeometry(int x, int y, 
./af/xap/qnx/xap_QNXApp.cpp-100-							 unsigned int width, unsigned int height, 
./af/xap/qnx/xap_QNXApp.cpp-101-							 windowGeometryFlags flags)
./af/xap/qnx/xap_QNXApp.cpp-102-{
./af/xap/qnx/xap_QNXApp.cpp:103:	// TODO : do some range checking?
./af/xap/qnx/xap_QNXApp.cpp-104-	m_geometry.x = x;
./af/xap/qnx/xap_QNXApp.cpp-105-	m_geometry.y = y;
./af/xap/qnx/xap_QNXApp.cpp-106-	m_geometry.width = width;
./af/xap/qnx/xap_QNXApp.cpp-107-	m_geometry.height = height;
./af/xap/qnx/xap_QNXApp.cpp-108-	m_geometry.flags = flags;
./af/xap/qnx/xap_QNXApp.cpp-193-			p[len-1] = 0;
./af/xap/qnx/xap_QNXApp.cpp-194-		XAP_App::_setAbiSuiteLibDir(p);
./af/xap/qnx/xap_QNXApp.cpp-195-		return;
./af/xap/qnx/xap_QNXApp.cpp-196-	}
./af/xap/qnx/xap_QNXApp.cpp-197-
./af/xap/qnx/xap_QNXApp.cpp:198:	// TODO what to do ??  try the current directory...
./af/xap/qnx/xap_QNXApp.cpp-199-	
./af/xap/qnx/xap_QNXApp.cpp-200-	UT_DEBUGMSG(("ABISUITE_HOME not set and -lib not given.  Assuming current directory...."));
./af/xap/qnx/xap_QNXApp.cpp-201-
./af/xap/qnx/xap_QNXApp.cpp-202-	getcwd(buf,sizeof(buf));
./af/xap/qnx/xap_QNXApp.cpp-203-	int len = strlen(buf);
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-143-		// in the frame that we were invoked on).  if the caller
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-144-		// wanted us to suggest a filename, use the initial
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-145-		// pathname as is.  if not, use the directory portion of
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-146-		// it.
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-147-		
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp:148:		//TODO: We need to make sure the fullpath of the 
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-149-		//      document is loaded up at start time.
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-150-
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-151-		if (m_bSuggestName)
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-152-		{
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-153-			// use m_szInitialPathname
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-174-
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-175-	memset(&info, 0, sizeof(info));
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-176-
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-177-	//Put this in a local function in order to run it in a loop
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-178-
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp:179:	//TODO: Dynamically create the file specification
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-180-	file_filter[0] = '\0';
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-181-	{
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-182-		UT_ASSERT(UT_pointerArrayLength((void **) m_szSuffixes) ==
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-183-				  UT_pointerArrayLength((void **) m_szDescriptions));
./af/xap/qnx/xap_QNXDlg_FileOpenSaveAs.cpp-184-
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-246-
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-247-	// make a new QNX GC
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-248-	DELETEP (m_qnxGraphics);
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-249-	m_qnxGraphics = new GR_QNXGraphics(mainWindow, m_SymbolMap, m_pApp);
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-250-
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp:251:	// let the widget materialize TODO: get a real size!
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-252-	UT_QNXGetWidgetArea(m_SymbolMap, NULL, NULL, &w, &h);
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-253-	_createSymbolFromGC(m_qnxGraphics, (UT_uint32) w, (UT_uint32) h);
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-254-
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-255-	// make a new QNX GC
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-256-	DELETEP (m_qnxarea);
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-329-// This function allows the symbol to be selected via the keyboard
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-330-//
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-331-
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-332-void XAP_QNXDialog_Insert_Symbol::Key_Pressed(void * e)
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-333-{
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp:334:	UT_DEBUGMSG(("TODO: Key Press Navigation "));
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-335-#if 0
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-336-	int move = 0;
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-337-
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-338-	switch (e->keyval)
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-339-	{
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-412-  Extract the new font string from the combo box, update the current symbol
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-413-  font and display the new set of symbols to choose from.
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-414-
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-415-  The text extraction code was stolen from ev_GnomeQNXToolbar.
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-416-*/
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp:417:	//TODO: Get the list from the combo box
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-418-	char * buffer = "Symbol";
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-419-
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-420-	iDrawSymbol->setSelectedFont(buffer);
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-421-	iDrawSymbol->draw();
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-422-	iDrawSymbol->drawarea(m_CurrentSymbol, m_PreviousSymbol);
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-486-	//m_Insert_Symbol_no_fonts++;			//Only one font handled now
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-487-
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-488-	// Then put the main symbol area in the center vertically 
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-489-	// *** Code Stolen from the preview widget ***
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-490-	{	
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp:491:		// TODO: 32 * x (19) = 608, 7 * y (21) = 147  FIXME!
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-492-		n = 0;
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-493-		PtSetArg(&args[n++], Pt_ARG_WIDTH, 608, 0);
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-494-		PtSetArg(&args[n++], Pt_ARG_HEIGHT, 147, 0);
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-495-		PtSetArg(&args[n++], Pt_ARG_GROUP_FLAGS, 
./af/xap/qnx/xap_QNXDlg_Insert_Symbol.cpp-496-			Pt_GROUP_STRETCH_HORIZONTAL, Pt_GROUP_STRETCH_HORIZONTAL);
./af/xap/qnx/xap_QNXDlg_Print.cpp-140-
./af/xap/qnx/xap_QNXDlg_Print.cpp-141-	if (m_pPrintContext) {
./af/xap/qnx/xap_QNXDlg_Print.cpp-142-		PpReleasePC(m_pPrintContext);
./af/xap/qnx/xap_QNXDlg_Print.cpp-143-	}
./af/xap/qnx/xap_QNXDlg_Print.cpp-144-
./af/xap/qnx/xap_QNXDlg_Print.cpp:145:	/*TODO: Map the user choices from persistPrintDlg to the current dialog */
./af/xap/qnx/xap_QNXDlg_Print.cpp-146-
./af/xap/qnx/xap_QNXDlg_Print.cpp-147-	int value;
./af/xap/qnx/xap_QNXDlg_Print.cpp-148-
./af/xap/qnx/xap_QNXDlg_Print.cpp-149-	m_pPrintContext = PpCreatePC();
./af/xap/qnx/xap_QNXDlg_Print.cpp-150-	UT_ASSERT(m_pPrintContext);
./af/xap/qnx/xap_QNXDlg_Print.cpp-169-		char *option;
./af/xap/qnx/xap_QNXDlg_Print.cpp-170-		PhPoint_t	*gpoint, point;
./af/xap/qnx/xap_QNXDlg_Print.cpp-171-		PhRect_t 	*rect, nrect;
./af/xap/qnx/xap_QNXDlg_Print.cpp-172-		PhDim_t 	*dim, size;
./af/xap/qnx/xap_QNXDlg_Print.cpp-173-
./af/xap/qnx/xap_QNXDlg_Print.cpp:174:		//TODO: Do we need to specify a source of 72 dpi?
./af/xap/qnx/xap_QNXDlg_Print.cpp-175-
./af/xap/qnx/xap_QNXDlg_Print.cpp-176-		//Set the print resolution to the same as what we draw with
./af/xap/qnx/xap_QNXDlg_Print.cpp-177-		PpGetPC(m_pPrintContext, Pp_PC_PRINTER_RESOLUTION, (const void **)&gpoint);
./af/xap/qnx/xap_QNXDlg_Print.cpp-178-		UT_DEBUGMSG(("PRINT: Printer resolution is %d,%d", gpoint->x, gpoint->y));
./af/xap/qnx/xap_QNXDlg_Print.cpp-179-		if (gpoint->x < 300 || gpoint->y < 300) {
./af/xap/qnx/xap_QNXDlg_WindowMore.cpp-282-
./af/xap/qnx/xap_QNXDlg_WindowMore.cpp-283-	for (UT_uint32 i = 0; i < m_pApp->getFrameCount(); i++)
./af/xap/qnx/xap_QNXDlg_WindowMore.cpp-284-	{
./af/xap/qnx/xap_QNXDlg_WindowMore.cpp-285-		XAP_Frame * f = m_pApp->getFrame(i);
./af/xap/qnx/xap_QNXDlg_WindowMore.cpp-286-		UT_ASSERT(f);
./af/xap/qnx/xap_QNXDlg_WindowMore.cpp:287:		const char * s = f->getTitle(128);	// TODO: chop this down more? 
./af/xap/qnx/xap_QNXDlg_WindowMore.cpp-288-		
./af/xap/qnx/xap_QNXDlg_WindowMore.cpp-289-		PtListAddItems(m_clistWindows, &s, 1, 0);
./af/xap/qnx/xap_QNXDlg_WindowMore.cpp-290-	} 
./af/xap/qnx/xap_QNXDlg_WindowMore.cpp-291-	PtListSelectPos(m_clistWindows, 1);
./af/xap/qnx/xap_QNXDlg_WindowMore.cpp-292-	m_ndxSelFrame = 0;
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-265-
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-266-void XAP_QNXDialog_Zoom::event_RadioPageWidthClicked(void)
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-267-{
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-268-	m_zoomType = XAP_Frame::z_PAGEWIDTH;
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-269-	_enablePercentSpin(UT_FALSE);
./af/xap/qnx/xap_QNXDlg_Zoom.cpp:270:	// TODO : figure out the dimensions
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-271-	PtDamageWidget(m_previewArea);
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-272-}
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-273-
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-274-void XAP_QNXDialog_Zoom::event_RadioWholePageClicked(void)
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-275-{
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-276-	m_zoomType = XAP_Frame::z_WHOLEPAGE;
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-277-	_enablePercentSpin(UT_FALSE);
./af/xap/qnx/xap_QNXDlg_Zoom.cpp:278:	// TODO : figure out the dimensions
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-279-	PtDamageWidget(m_previewArea);
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-280-}
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-281-
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-282-void XAP_QNXDialog_Zoom::event_RadioPercentClicked(void)
./af/xap/qnx/xap_QNXDlg_Zoom.cpp-283-{
./af/xap/qnx/xap_QNXFrame.cpp-291-	m_pQNXMenu = NULL;
./af/xap/qnx/xap_QNXFrame.cpp-292-	m_pQNXPopup = NULL;
./af/xap/qnx/xap_QNXFrame.cpp-293-	m_pView = NULL;
./af/xap/qnx/xap_QNXFrame.cpp-294-}
./af/xap/qnx/xap_QNXFrame.cpp-295-
./af/xap/qnx/xap_QNXFrame.cpp:296:// TODO when cloning a new frame from an existing one
./af/xap/qnx/xap_QNXFrame.cpp:297:// TODO should we also clone any frame-persistent
./af/xap/qnx/xap_QNXFrame.cpp:298:// TODO dialog data ??
./af/xap/qnx/xap_QNXFrame.cpp-299-
./af/xap/qnx/xap_QNXFrame.cpp-300-/*
./af/xap/qnx/xap_QNXFrame.cpp-301-XAP_QNXFrame::XAP_QNXFrame(XAP_QNXFrame * f)
./af/xap/qnx/xap_QNXFrame.cpp-302-	: XAP_Frame(static_cast<XAP_Frame *>(f)),
./af/xap/qnx/xap_QNXFrame.cpp-303-	  m_dialogFactory(this, static_cast<XAP_App *>(f->m_pQNXApp))
./af/xap/qnx/xap_QNXFrame.cpp-430-	}
./af/xap/qnx/xap_QNXFrame.cpp-431-	//PtAddEventHandler(m_wTopLevelWindow, Ph_EV_KEY, _fe::key_press_event, this);
./af/xap/qnx/xap_QNXFrame.cpp-432-	PtAddCallback(m_wTopLevelWindow, Pt_CB_GOT_FOCUS, _fe::focus_in_event, this);
./af/xap/qnx/xap_QNXFrame.cpp-433-	PtAddCallback(m_wTopLevelWindow, Pt_CB_LOST_FOCUS, _fe::focus_out_event, this);
./af/xap/qnx/xap_QNXFrame.cpp-434-
./af/xap/qnx/xap_QNXFrame.cpp:435:	/* TODO: Menu and the Toolbars all go into the same Toolbar "group" */
./af/xap/qnx/xap_QNXFrame.cpp-436-#if 0
./af/xap/qnx/xap_QNXFrame.cpp-437-	n = 0;
./af/xap/qnx/xap_QNXFrame.cpp-438-#define _MNU_GRP_ANCHOR_ (Pt_LEFT_ANCHORED_LEFT | Pt_RIGHT_ANCHORED_RIGHT | Pt_TOP_ANCHORED_TOP)
./af/xap/qnx/xap_QNXFrame.cpp-439-    PtSetArg(&args[n++], Pt_ARG_ANCHOR_FLAGS, _MNU_GRP_ANCHOR_, _MNU_GRP_ANCHOR_);
./af/xap/qnx/xap_QNXFrame.cpp-440-    PtSetArg(&args[n++], Pt_ARG_RESIZE_FLAGS, 0, Pt_RESIZE_X_BITS);
./af/xap/qnx/xap_QNXFrame.cpp-501-
./af/xap/qnx/xap_QNXFrame.cpp-502-UT_Bool XAP_QNXFrame::openURL(const char * szURL)
./af/xap/qnx/xap_QNXFrame.cpp-503-{
./af/xap/qnx/xap_QNXFrame.cpp-504-	char execstring[4096];
./af/xap/qnx/xap_QNXFrame.cpp-505-
./af/xap/qnx/xap_QNXFrame.cpp:506:	//TODO: I should use spawn here
./af/xap/qnx/xap_QNXFrame.cpp-507-	snprintf(execstring, 4096, "voyager -u %s &", szURL);
./af/xap/qnx/xap_QNXFrame.cpp-508-	system(execstring);
./af/xap/qnx/xap_QNXFrame.cpp-509-
./af/xap/qnx/xap_QNXFrame.cpp-510-	return UT_TRUE;
./af/xap/qnx/xap_QNXFrame.cpp-511-}
./af/xap/qnx/xap_QNXToolbar_Icons.cpp-27-{
./af/xap/qnx/xap_QNXToolbar_Icons.cpp-28-}
./af/xap/qnx/xap_QNXToolbar_Icons.cpp-29-
./af/xap/qnx/xap_QNXToolbar_Icons.cpp-30-AP_QNXToolbar_Icons::~AP_QNXToolbar_Icons(void)
./af/xap/qnx/xap_QNXToolbar_Icons.cpp-31-{
./af/xap/qnx/xap_QNXToolbar_Icons.cpp:32:	// TODO do we need to keep some kind of list
./af/xap/qnx/xap_QNXToolbar_Icons.cpp:33:	// TODO of the things we have created and
./af/xap/qnx/xap_QNXToolbar_Icons.cpp:34:	// TODO handed out, so that we can delete them ??
./af/xap/qnx/xap_QNXToolbar_Icons.cpp-35-}
./af/xap/qnx/xap_QNXToolbar_Icons.cpp-36-
./af/xap/qnx/xap_QNXToolbar_Icons.cpp-37-PhImage_t *AP_QNXToolbar_Icons::getPixmapForIcon(const char * szIconName) 
./af/xap/qnx/xap_QNXToolbar_Icons.cpp-38-{
./af/xap/qnx/xap_QNXToolbar_Icons.cpp-39-	PhImage_t *outimage = NULL;
./wp/ap/qnx/ap_QNXApp.cpp-429-		IE_Imp_Text * pImpText = new IE_Imp_Text(pDocRange->m_pDoc);
./wp/ap/qnx/ap_QNXApp.cpp-430-		pImpText->pasteFromBuffer(pDocRange,pData,iLen);
./wp/ap/qnx/ap_QNXApp.cpp-431-		DELETEP(pImpText);
./wp/ap/qnx/ap_QNXApp.cpp-432-	}
./wp/ap/qnx/ap_QNXApp.cpp-433-	else {
./wp/ap/qnx/ap_QNXApp.cpp:434:		// TODO figure out what to do with an image....
./wp/ap/qnx/ap_QNXApp.cpp:435:		UT_DEBUGMSG(("PasteFromClipboard: TODO support this format..."));
./wp/ap/qnx/ap_QNXApp.cpp-436-	}
./wp/ap/qnx/ap_QNXApp.cpp-437-	
./wp/ap/qnx/ap_QNXApp.cpp-438-	if (handle) {
./wp/ap/qnx/ap_QNXApp.cpp-439-		PhClipboardPasteFinish(handle);
./wp/ap/qnx/ap_QNXApp.cpp-440-	}
./wp/ap/qnx/ap_QNXApp.cpp-593-		// selection in the given view.  this is intended for the
./wp/ap/qnx/ap_QNXApp.cpp-594-		// X11 middle mouse trick -- where we need to warp to a
./wp/ap/qnx/ap_QNXApp.cpp-595-		// new location and paste the current selection (not the
./wp/ap/qnx/ap_QNXApp.cpp-596-		// clipboard) and the act of warping clears the selection.
./wp/ap/qnx/ap_QNXApp.cpp-597-
./wp/ap/qnx/ap_QNXApp.cpp:598:		// TODO if we ever support multiple view types, we'll have to
./wp/ap/qnx/ap_QNXApp.cpp:599:		// TODO change this.
./wp/ap/qnx/ap_QNXApp.cpp-600-#if defined(__WATCOMC__)
./wp/ap/qnx/ap_QNXApp.cpp-601-		FV_View * pFVView = (FV_View *)(pView);
./wp/ap/qnx/ap_QNXApp.cpp-602-#else
./wp/ap/qnx/ap_QNXApp.cpp-603-		FV_View * pFVView = static_cast<FV_View *>(pView);
./wp/ap/qnx/ap_QNXApp.cpp-604-#endif
./wp/ap/qnx/ap_QNXApp.cpp-652-		dr = m_cacheDocumentRangeOfSelection;
./wp/ap/qnx/ap_QNXApp.cpp-653-		UT_DEBUGMSG(("Clipboard::getCurrentSelection: *using cached values* [range %d %d]\n",dr.m_pos1,dr.m_pos2));
./wp/ap/qnx/ap_QNXApp.cpp-654-	}
./wp/ap/qnx/ap_QNXApp.cpp-655-	else
./wp/ap/qnx/ap_QNXApp.cpp-656-	{
./wp/ap/qnx/ap_QNXApp.cpp:657:		// TODO if we ever support multiple view types, we'll have to
./wp/ap/qnx/ap_QNXApp.cpp:658:		// TODO change this.
./wp/ap/qnx/ap_QNXApp.cpp-659-#if defined(__WATCOMC__)
./wp/ap/qnx/ap_QNXApp.cpp-660-		FV_View * pFVView = (FV_View *)(m_pViewSelection);
./wp/ap/qnx/ap_QNXApp.cpp-661-#else
./wp/ap/qnx/ap_QNXApp.cpp-662-		FV_View * pFVView = static_cast<FV_View *>(m_pViewSelection);
./wp/ap/qnx/ap_QNXApp.cpp-663-#endif
./wp/ap/qnx/ap_QNXApp.cpp-693-			pExpText->copyToBuffer(&dr,&m_selectionByteBuf);
./wp/ap/qnx/ap_QNXApp.cpp-694-			DELETEP(pExpText);
./wp/ap/qnx/ap_QNXApp.cpp-695-			goto ReturnThisBuffer;
./wp/ap/qnx/ap_QNXApp.cpp-696-		}
./wp/ap/qnx/ap_QNXApp.cpp-697-
./wp/ap/qnx/ap_QNXApp.cpp:698:		// TODO add other formats as necessary
./wp/ap/qnx/ap_QNXApp.cpp-699-	}
./wp/ap/qnx/ap_QNXApp.cpp-700-
./wp/ap/qnx/ap_QNXApp.cpp-701-	UT_DEBUGMSG(("Clipboard::getCurrentSelection: cannot create anything in one of requested formats.\n"));
./wp/ap/qnx/ap_QNXApp.cpp-702-	return UT_FALSE;
./wp/ap/qnx/ap_QNXApp.cpp-703-
./wp/ap/qnx/ap_QNXApp.cpp-800-		PtSetArg(&args[n++], Pt_ARG_RAW_DRAW_F, &s_drawingarea_expose, 1);
./wp/ap/qnx/ap_QNXApp.cpp-801-		PtWidget_t *da = PtCreateWidget(PtRaw, spwin, n, args);
./wp/ap/qnx/ap_QNXApp.cpp-802-		PtAddEventHandler(da, Ph_EV_BUT_RELEASE, s_hideSplash, NULL);
./wp/ap/qnx/ap_QNXApp.cpp-803-
./wp/ap/qnx/ap_QNXApp.cpp-804-		// create image context
./wp/ap/qnx/ap_QNXApp.cpp:805:		// TODO: find an XAP_App pointer for the following call:
./wp/ap/qnx/ap_QNXApp.cpp-806-		pQNXGraphics = new GR_QNXGraphics(spwin, da, 0);
./wp/ap/qnx/ap_QNXApp.cpp-807-		pSplashImage = pQNXGraphics->createNewImage("splash", pBB, iSplashWidth, iSplashHeight);
./wp/ap/qnx/ap_QNXApp.cpp-808-
./wp/ap/qnx/ap_QNXApp.cpp-809-		PtRealizeWidget(spwin);
./wp/ap/qnx/ap_QNXApp.cpp-810-	}
./wp/ap/qnx/ap_QNXApp.cpp-865-				bShowSplash = UT_FALSE;
./wp/ap/qnx/ap_QNXApp.cpp-866-				break;
./wp/ap/qnx/ap_QNXApp.cpp-867-			}
./wp/ap/qnx/ap_QNXApp.cpp-868-
./wp/ap/qnx/ap_QNXApp.cpp-869-
./wp/ap/qnx/ap_QNXApp.cpp:870:	//TODO: Do a PtAppInit() here with the main window being the splash screen
./wp/ap/qnx/ap_QNXApp.cpp-871-	PtWidget_t *spwin;
./wp/ap/qnx/ap_QNXApp.cpp-872-	spwin = PtAppInit(NULL, NULL /* Args.m_argc */, NULL /* Args.m_argv */, 0, NULL);
./wp/ap/qnx/ap_QNXApp.cpp-873-	if (bShowSplash) {
./wp/ap/qnx/ap_QNXApp.cpp-874-		_showSplash(spwin, 2000);
./wp/ap/qnx/ap_QNXApp.cpp-875-	}
./wp/ap/qnx/ap_QNXApp.cpp-895-    sigaction(SIGSEGV, &sa, NULL);
./wp/ap/qnx/ap_QNXApp.cpp-896-    sigaction(SIGBUS, &sa, NULL);
./wp/ap/qnx/ap_QNXApp.cpp-897-    sigaction(SIGILL, &sa, NULL);
./wp/ap/qnx/ap_QNXApp.cpp-898-    sigaction(SIGQUIT, &sa, NULL);
./wp/ap/qnx/ap_QNXApp.cpp-899-    sigaction(SIGFPE, &sa, NULL);
./wp/ap/qnx/ap_QNXApp.cpp:900:    // TODO: handle SIGABRT
./wp/ap/qnx/ap_QNXApp.cpp-901-
./wp/ap/qnx/ap_QNXApp.cpp-902-	//This is used by all the timer classes, and should probably be in the XAP contructor
./wp/ap/qnx/ap_QNXApp.cpp-903-	PtArg_t args[2];
./wp/ap/qnx/ap_QNXApp.cpp-904-	PtSetArg(&args[0], Pt_ARG_REGION_FIELDS, Ph_REGION_EV_SENSE, Ph_REGION_EV_SENSE);
./wp/ap/qnx/ap_QNXApp.cpp-905-	PtSetArg(&args[1], Pt_ARG_REGION_SENSE, Ph_EV_TIMER, Ph_EV_TIMER);
./wp/ap/qnx/ap_QNXApp.cpp-932-UT_Bool AP_QNXApp::parseCommandLine(void)
./wp/ap/qnx/ap_QNXApp.cpp-933-{
./wp/ap/qnx/ap_QNXApp.cpp-934-	// parse the command line
./wp/ap/qnx/ap_QNXApp.cpp-935-	// <app> [-script <scriptname>]* [-dumpstrings] [<documentname>]*
./wp/ap/qnx/ap_QNXApp.cpp-936-        
./wp/ap/qnx/ap_QNXApp.cpp:937:	// TODO when we refactor the App classes, consider moving
./wp/ap/qnx/ap_QNXApp.cpp:938:	// TODO this to app-specific, cross-platform.
./wp/ap/qnx/ap_QNXApp.cpp-939-
./wp/ap/qnx/ap_QNXApp.cpp:940:	// TODO replace this with getopt or something similar.
./wp/ap/qnx/ap_QNXApp.cpp-941-        
./wp/ap/qnx/ap_QNXApp.cpp-942-	// QNX puts the program name in argv[0], so [1] is the first argument.
./wp/ap/qnx/ap_QNXApp.cpp-943-
./wp/ap/qnx/ap_QNXApp.cpp-944-	int nFirstArg = 1;
./wp/ap/qnx/ap_QNXApp.cpp-945-	int k;
./wp/ap/qnx/ap_QNXApp.cpp-983-				// [-geometry <X geometry string>]
./wp/ap/qnx/ap_QNXApp.cpp-984-
./wp/ap/qnx/ap_QNXApp.cpp-985-				// let us at the next argument
./wp/ap/qnx/ap_QNXApp.cpp-986-				k++;
./wp/ap/qnx/ap_QNXApp.cpp-987-				
./wp/ap/qnx/ap_QNXApp.cpp:988:				// TODO : does X have a dummy geometry value reserved for this?
./wp/ap/qnx/ap_QNXApp.cpp-989-				int dummy = 1 << ((sizeof(int) * 8) - 1);
./wp/ap/qnx/ap_QNXApp.cpp-990-				int x = dummy;
./wp/ap/qnx/ap_QNXApp.cpp-991-				int y = dummy;
./wp/ap/qnx/ap_QNXApp.cpp-992-				int width = 0;
./wp/ap/qnx/ap_QNXApp.cpp-993-				int height = 0;
./wp/ap/qnx/ap_QNXApp.cpp-1026-			}
./wp/ap/qnx/ap_QNXApp.cpp-1027-
./wp/ap/qnx/ap_QNXApp.cpp-1028-			else
./wp/ap/qnx/ap_QNXApp.cpp-1029-			{
./wp/ap/qnx/ap_QNXApp.cpp-1030-				UT_DEBUGMSG(("Unknown command line option [%s]\n",m_pArgs->m_argv[k]));
./wp/ap/qnx/ap_QNXApp.cpp:1031:				// TODO don't know if it has a following argument or not -- assume not
./wp/ap/qnx/ap_QNXApp.cpp-1032-
./wp/ap/qnx/ap_QNXApp.cpp-1033-				_printUsage();
./wp/ap/qnx/ap_QNXApp.cpp-1034-				return UT_FALSE;
./wp/ap/qnx/ap_QNXApp.cpp-1035-			}
./wp/ap/qnx/ap_QNXApp.cpp-1036-		}
./wp/ap/qnx/ap_QNXApp.cpp-1052-				{
./wp/ap/qnx/ap_QNXApp.cpp-1053-					kWindowsOpened++;
./wp/ap/qnx/ap_QNXApp.cpp-1054-				}
./wp/ap/qnx/ap_QNXApp.cpp-1055-				else
./wp/ap/qnx/ap_QNXApp.cpp-1056-				{
./wp/ap/qnx/ap_QNXApp.cpp:1057:					// TODO: warn user that we couldn't open that file
./wp/ap/qnx/ap_QNXApp.cpp-1058-
./wp/ap/qnx/ap_QNXApp.cpp-1059-#if 1
./wp/ap/qnx/ap_QNXApp.cpp:1060:					// TODO we crash if we just delete this without putting something
./wp/ap/qnx/ap_QNXApp.cpp:1061:					// TODO in it, so let's go ahead and open an untitled document
./wp/ap/qnx/ap_QNXApp.cpp:1062:					// TODO for now.  this would cause us to get 2 untitled documents
./wp/ap/qnx/ap_QNXApp.cpp:1063:					// TODO if the user gave us 2 bogus pathnames....
./wp/ap/qnx/ap_QNXApp.cpp-1064-					kWindowsOpened++;
./wp/ap/qnx/ap_QNXApp.cpp-1065-					pFirstQNXFrame->loadDocument(NULL, IEFT_Unknown);
./wp/ap/qnx/ap_QNXApp.cpp-1066-
./wp/ap/qnx/ap_QNXApp.cpp-1067-					pFirstQNXFrame->raise();
./wp/ap/qnx/ap_QNXApp.cpp-1068-					
./wp/ap/qnx/ap_QNXApp.cpp-1144-	}
./wp/ap/qnx/ap_QNXApp.cpp-1145-
./wp/ap/qnx/ap_QNXApp.cpp-1146-	return UT_TRUE;
./wp/ap/qnx/ap_QNXApp.cpp-1147-}
./wp/ap/qnx/ap_QNXApp.cpp-1148-
./wp/ap/qnx/ap_QNXApp.cpp:1149:// TODO : MOVE THIS TO XP CODE!  This is a cut & paste job since each
./wp/ap/qnx/ap_QNXApp.cpp:1150:// TODO : platform _can_ have different options, and we didn't sort
./wp/ap/qnx/ap_QNXApp.cpp:1151:// TODO : out how to honor them correclty yet.  There is a copy of
./wp/ap/qnx/ap_QNXApp.cpp:1152:// TODO : this function in other platforms.
./wp/ap/qnx/ap_QNXApp.cpp-1153-
./wp/ap/qnx/ap_QNXApp.cpp-1154-void AP_QNXApp::_printUsage(void)
./wp/ap/qnx/ap_QNXApp.cpp-1155-{
./wp/ap/qnx/ap_QNXApp.cpp-1156-	// just print to stdout, not stderr
./wp/ap/qnx/ap_QNXApp.cpp-1157-	printf("\nUsage: %s [option]... [file]...\n\n", m_pArgs->m_argv[0]);
./wp/ap/qnx/ap_QNXClipboard.cpp-40-
./wp/ap/qnx/ap_QNXClipboard.cpp-41-   	AddFmt(AP_CLIPBOARD_RTF);
./wp/ap/qnx/ap_QNXClipboard.cpp-42-	AddFmt(AP_CLIPBOARD_TEXTPLAIN_8BIT);
./wp/ap/qnx/ap_QNXClipboard.cpp-43-	AddFmt(AP_CLIPBOARD_STRING);		// alias for TEXTPLAIN_8BIT
./wp/ap/qnx/ap_QNXClipboard.cpp-44-
./wp/ap/qnx/ap_QNXClipboard.cpp:45:	// TODO deal with multi-byte text (either unicode or utf8 or whatever)
./wp/ap/qnx/ap_QNXClipboard.cpp:46:	// TODO add something like the following.  you should be able to test
./wp/ap/qnx/ap_QNXClipboard.cpp:47:	// TODO against xemacs.
./wp/ap/qnx/ap_QNXClipboard.cpp:48:	// TODO
./wp/ap/qnx/ap_QNXClipboard.cpp:49:	// TODO AddFmt(AP_CLIPBOARD_COMPOUND_TEXT);
./wp/ap/qnx/ap_QNXClipboard.cpp-50-
./wp/ap/qnx/ap_QNXClipboard.cpp-51-#undef AddFmt
./wp/ap/qnx/ap_QNXClipboard.cpp-52-#endif
./wp/ap/qnx/ap_QNXClipboard.cpp-53-}
./wp/ap/qnx/ap_QNXDialog_Break.cpp-140-	
./wp/ap/qnx/ap_QNXDialog_Break.cpp-141-}
./wp/ap/qnx/ap_QNXDialog_Break.cpp-142-
./wp/ap/qnx/ap_QNXDialog_Break.cpp-143-void AP_QNXDialog_Break::event_OK(void)
./wp/ap/qnx/ap_QNXDialog_Break.cpp-144-{
./wp/ap/qnx/ap_QNXDialog_Break.cpp:145:	// TODO save out state of radio items
./wp/ap/qnx/ap_QNXDialog_Break.cpp-146-	if (!done++) {
./wp/ap/qnx/ap_QNXDialog_Break.cpp-147-		m_answer = AP_Dialog_Break::a_OK;
./wp/ap/qnx/ap_QNXDialog_Break.cpp-148-	}
./wp/ap/qnx/ap_QNXDialog_Break.cpp-149-}
./wp/ap/qnx/ap_QNXDialog_Break.cpp-150-
./wp/ap/qnx/ap_QNXDialog_Break.cpp-200-    PtSetArg(&args[n++], Pt_ARG_WINDOW_RENDER_FLAGS, 0, ABI_MODAL_WINDOW_RENDER_FLAGS);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-201-    PtSetArg(&args[n++], Pt_ARG_WINDOW_MANAGED_FLAGS, 0, ABI_MODAL_WINDOW_MANAGE_FLAGS);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-202-	windowBreak = PtCreateWidget(PtWindow, NULL, n, args);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-203-	PtAddCallback(windowBreak, Pt_CB_WINDOW_CLOSING, s_delete_clicked, this);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-204-
./wp/ap/qnx/ap_QNXDialog_Break.cpp:205:	/* TODO: Add all these items to a group */
./wp/ap/qnx/ap_QNXDialog_Break.cpp-206-	n = 0;
./wp/ap/qnx/ap_QNXDialog_Break.cpp-207-	//PtSetArg(&args[n++], Pt_ARG_GROUP_FLAGS, Pt_GROUP_EXCLUSIVE, Pt_GROUP_EXCLUSIVE);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-208-	PtSetArg(&args[n++], Pt_ARG_HEIGHT, height, 0);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-209-	PtSetArg(&args[n++], Pt_ARG_WIDTH, width, 0);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-210-	PtSetArg(&args[n++], Pt_ARG_WIDTH, width, 0);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-226-	area.pos.x = GEN_OFFSET; area.pos.y = GEN_OFFSET;
./wp/ap/qnx/ap_QNXDialog_Break.cpp-227-	area.size.w = LABEL_WIDTH; area.size.h = GEN_HEIGHT;
./wp/ap/qnx/ap_QNXDialog_Break.cpp-228-	PtSetArg(&args[n++], Pt_ARG_AREA, &area, 0);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-229-	labelInsert = PtCreateWidget(PtLabel, boxTop, n, args);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-230-
./wp/ap/qnx/ap_QNXDialog_Break.cpp:231:	/* TODO: Add a seperator */
./wp/ap/qnx/ap_QNXDialog_Break.cpp-232-
./wp/ap/qnx/ap_QNXDialog_Break.cpp-233-	n = 0;
./wp/ap/qnx/ap_QNXDialog_Break.cpp-234-	UT_XML_cloneNoAmpersands(unixstr, pSS->getValue(AP_STRING_ID_DLG_Break_PageBreak));	
./wp/ap/qnx/ap_QNXDialog_Break.cpp-235-	PtSetArg(&args[n++], Pt_ARG_TEXT_STRING, unixstr, 0);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-236-	area.pos.x = 2*GEN_OFFSET; area.pos.y += area.size.h + GEN_OFFSET;
./wp/ap/qnx/ap_QNXDialog_Break.cpp-260-	PtSetArg(&args[n++], Pt_ARG_TEXT_STRING, unixstr, 0);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-261-	area.pos.x = GEN_OFFSET; area.pos.y += area.size.h + GEN_OFFSET;
./wp/ap/qnx/ap_QNXDialog_Break.cpp-262-	PtSetArg(&args[n++], Pt_ARG_AREA, &area, 0);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-263-	labelSectionBreaks = PtCreateWidget(PtLabel, boxTop, n, args);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-264-
./wp/ap/qnx/ap_QNXDialog_Break.cpp:265:	/* TODO: Add a seperator */
./wp/ap/qnx/ap_QNXDialog_Break.cpp-266-
./wp/ap/qnx/ap_QNXDialog_Break.cpp-267-	n = 0;
./wp/ap/qnx/ap_QNXDialog_Break.cpp-268-	UT_XML_cloneNoAmpersands(unixstr, pSS->getValue(AP_STRING_ID_DLG_Break_NextPage));	
./wp/ap/qnx/ap_QNXDialog_Break.cpp-269-	PtSetArg(&args[n++], Pt_ARG_TEXT_STRING, unixstr, 0);
./wp/ap/qnx/ap_QNXDialog_Break.cpp-270-	area.pos.x = 2*GEN_OFFSET; area.pos.y += area.size.h + GEN_OFFSET;
./wp/ap/qnx/ap_QNXDialog_Columns.cpp-271-}
./wp/ap/qnx/ap_QNXDialog_Columns.cpp-272-
./wp/ap/qnx/ap_QNXDialog_Columns.cpp-273-
./wp/ap/qnx/ap_QNXDialog_Columns.cpp-274-void AP_QNXDialog_Columns::event_OK(void)
./wp/ap/qnx/ap_QNXDialog_Columns.cpp-275-{
./wp/ap/qnx/ap_QNXDialog_Columns.cpp:276:	// TODO save out state of radio items
./wp/ap/qnx/ap_QNXDialog_Columns.cpp-277-	m_answer = AP_Dialog_Columns::a_OK;
./wp/ap/qnx/ap_QNXDialog_Columns.cpp-278-	done++;
./wp/ap/qnx/ap_QNXDialog_Columns.cpp-279-}
./wp/ap/qnx/ap_QNXDialog_Columns.cpp-280-
./wp/ap/qnx/ap_QNXDialog_Columns.cpp-281-void AP_QNXDialog_Columns::event_Cancel(void)
./wp/ap/qnx/ap_QNXDialog_Lists.cpp-262-		return;
./wp/ap/qnx/ap_QNXDialog_Lists.cpp-263-	} else  {
./wp/ap/qnx/ap_QNXDialog_Lists.cpp-264-		UT_DEBUGMSG(("typeChanged(%d) from old style %d", style, *currenttype));
./wp/ap/qnx/ap_QNXDialog_Lists.cpp-265-	}
./wp/ap/qnx/ap_QNXDialog_Lists.cpp-266-
./wp/ap/qnx/ap_QNXDialog_Lists.cpp:267:	//TODO: Make these #define's or enumerated types
./wp/ap/qnx/ap_QNXDialog_Lists.cpp-268-	switch(style) {
./wp/ap/qnx/ap_QNXDialog_Lists.cpp-269-	case 0:
./wp/ap/qnx/ap_QNXDialog_Lists.cpp-270-		_fillNoneStyleMenu(m_wListStyle_menu);
./wp/ap/qnx/ap_QNXDialog_Lists.cpp-271-		break;
./wp/ap/qnx/ap_QNXDialog_Lists.cpp-272-	case 1:
./wp/ap/qnx/ap_QNXDialog_Options.cpp-882-#endif
./wp/ap/qnx/ap_QNXDialog_Options.cpp-883-}
./wp/ap/qnx/ap_QNXDialog_Options.cpp-884-
./wp/ap/qnx/ap_QNXDialog_Options.cpp-885-void    AP_QNXDialog_Options::_setViewRulerUnits(UT_Dimension dim) 
./wp/ap/qnx/ap_QNXDialog_Options.cpp-886-{	
./wp/ap/qnx/ap_QNXDialog_Options.cpp:887:	UT_DEBUGMSG(("TODO: setViewRulerUnits "));
./wp/ap/qnx/ap_QNXDialog_Options.cpp-888-#if 0
./wp/ap/qnx/ap_QNXDialog_Options.cpp-889-	int r = option_menu_set_by_key ( m_listViewRulerUnits, (void *)dim, WIDGET_MENU_VALUE_TAG ); 
./wp/ap/qnx/ap_QNXDialog_Options.cpp-890-#endif
./wp/ap/qnx/ap_QNXDialog_Options.cpp-891-}
./wp/ap/qnx/ap_QNXDialog_Options.cpp-892-
./wp/ap/qnx/ap_QNXDialog_Options.cpp-898-
./wp/ap/qnx/ap_QNXDialog_Options.cpp-899-#undef DEFINE_GET_SET_BOOL
./wp/ap/qnx/ap_QNXDialog_Options.cpp-900-
./wp/ap/qnx/ap_QNXDialog_Options.cpp-901-int AP_QNXDialog_Options::_gatherNotebookPageNum(void) 
./wp/ap/qnx/ap_QNXDialog_Options.cpp-902-{				
./wp/ap/qnx/ap_QNXDialog_Options.cpp:903:	UT_DEBUGMSG(("TODO: _gatherNotebookPageNum "));
./wp/ap/qnx/ap_QNXDialog_Options.cpp-904-	return 0;
./wp/ap/qnx/ap_QNXDialog_Options.cpp-905-}			
./wp/ap/qnx/ap_QNXDialog_Options.cpp-906-
./wp/ap/qnx/ap_QNXDialog_Options.cpp-907-void    AP_QNXDialog_Options::_setNotebookPageNum(int pn) 
./wp/ap/qnx/ap_QNXDialog_Options.cpp-908-{	
./wp/ap/qnx/ap_QNXDialog_Options.cpp:909:	UT_DEBUGMSG(("TODO: _gatherNotebookPageNum "));
./wp/ap/qnx/ap_QNXDialog_Options.cpp-910-}
./wp/ap/qnx/ap_QNXDialog_Options.cpp-911-
./wp/ap/qnx/ap_QNXDialog_Options.cpp-912-fp_PageSize::Predefined AP_QNXDialog_Options::_gatherDefaultPageSize(void)
./wp/ap/qnx/ap_QNXDialog_Options.cpp-913-{
./wp/ap/qnx/ap_QNXDialog_Options.cpp-914-	// FIXME: replace this with *real* gui code
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-376-	UT_ASSERT(widget);
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-377-
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-378-	tControl id = (tControl) TFGetDataInt(widget); 
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-379-	tCheckState cs;
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-380-
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp:381:	// TODO : handle tri-state boxes !!!
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-382-	if (TFToggleGetState(widget)) 
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-383-		cs = check_TRUE;
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-384-	else
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-385-		cs = check_FALSE;
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-386-
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-467-
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-468-	PtArg_t args[10];
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-469-	int     n = 0;
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-470-	double  inc = 0.01;
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-471-
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp:472:	//TODO: Put a vertical group in the window first, set the offset etc.
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-473-
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-474-#define WIN_WIDTH  550	
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-475-#define WIN_HEIGHT 400	
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-476-	n = 0;
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-477-	UT_XML_cloneNoAmpersands(unixstr, pSS->getValue(AP_STRING_ID_DLG_Para_ParaTitle));
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-726-	PtSetResources(spinbuttonLeft, n, args);
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-727-	TFSetDataInt(spinbuttonBefore, id_SPIN_BEFORE_SPACING);
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-728-
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-729-	labelBefore = PtCreateWidget( PtLabel, NULL, sizeof(args19) / sizeof(PtArg_t), args19 );
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-730-
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp:731:	//TODO: Make this a numeric float!
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-732-	spinbuttonAt = PtCreateWidget( PtNumericFloat, NULL, sizeof(args20) / sizeof(PtArg_t), args20 );
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-733-	n = 0;
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-734-	PtSetArg(&args[n++], Pt_ARG_NUMERIC_INCREMENT, &inc, 0);
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-735-	PtSetResources(spinbuttonLeft, n, args);
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-736-	TFSetDataInt(spinbuttonAt, id_SPIN_SPECIAL_SPACING);
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-1030-
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-1031-	UT_ASSERT(m_listLineSpacing);
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-1032-	UT_QNXComboSetPos(m_listLineSpacing, _getMenuItemValue(id_MENU_SPECIAL_SPACING) + 1);
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-1033-
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-1034-	// set the check boxes
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp:1035:	// TODO : handle tri-state boxes !!!
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-1036-	TFToggleSetState(m_checkbuttonWidowOrphan,
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-1037-						 (_getCheckItemValue(id_CHECK_WIDOW_ORPHAN) == check_TRUE));
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-1038-
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-1039-	TFToggleSetState(m_checkbuttonKeepLines,
./wp/ap/qnx/ap_QNXDialog_Paragraph.cpp-1040-								 (_getCheckItemValue(id_CHECK_KEEP_LINES) == check_TRUE));
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-272-
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-273-void AP_QNXDialog_Replace::event_MatchCaseToggled(void)
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-274-{
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-275-	UT_ASSERT(m_checkbuttonMatchCase);
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-276-
./wp/ap/qnx/ap_QNXDialog_Replace.cpp:277:	//TODO: Turn this into a helper function
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-278-	int *flags = NULL;
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-279-	PtGetResource(m_checkbuttonMatchCase, Pt_ARG_FLAGS, &flags, 0);
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-280-	setMatchCase((flags && *flags & Pt_SET) ? UT_TRUE: UT_FALSE);
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-281-}
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-282-
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-508-	//gtk_widget_grab_focus(m_entryFind);	
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-509-}
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-510-
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-511-void AP_QNXDialog_Replace::_storeWindowData(void)
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-512-{
./wp/ap/qnx/ap_QNXDialog_Replace.cpp:513:	// TODO: nothing?  The actual methods store
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-514-	// out last used data to the persist variables,
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-515-	// since we need to save state when things actually
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-516-	// happen (not when the dialog closes).
./wp/ap/qnx/ap_QNXDialog_Replace.cpp-517-}
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-16- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-17- * 02111-1307, USA.
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-18- */
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-19-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-20-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp:21:// TODO: still getting some artifacts when doing highligh/replacements
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-22-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-23-#include <stdlib.h>
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-24-#include <string.h>
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-25-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-26-#include "ut_string.h"
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-434-						  len,			/* length of text */
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-435-						  &attrs,		/* Attributes */
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-436-						  Pt_MT_TEXT_COLOR);   /* Flags on which attrs to use */				
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-437-   FREEP(str);
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-438-    
./wp/ap/qnx/ap_QNXDialog_Spell.cpp:439:   // TODO: set scroll position so misspelled word is centered
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-440-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-441-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-442-   char *suggest[2] = {NULL, NULL};
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-443-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-444-   PtListDeleteAllItems(m_clistSuggestions); 
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-474-   
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-475-}
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-476-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-477-void AP_QNXDialog_Spell::_populateWindowData(void)
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-478-{
./wp/ap/qnx/ap_QNXDialog_Spell.cpp:479:   // TODO: initialize list of user dictionaries
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-480-}
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-481-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-482-void AP_QNXDialog_Spell::_storeWindowData(void)
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-483-{
./wp/ap/qnx/ap_QNXDialog_Spell.cpp:484:   // TODO: anything to store?
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-485-}
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-486-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-487-/*************************************************************/
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-488-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-489-void AP_QNXDialog_Spell::event_Change()
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-594-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-595-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-596-// Photon uses multibyte strings for i18n
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-597-// these functions convert from wide (UCS) to MB and back
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-598-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp:599:// TODO: these are probably generally useful functions,
./wp/ap/qnx/ap_QNXDialog_Spell.cpp:600:// TODO: but I don't know about xp support for them.
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-601-
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-602-// make a multibyte encoded version of a string
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-603-char * AP_QNXDialog_Spell::_convertToMB(UT_UCSChar *wword)
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-604-{
./wp/ap/qnx/ap_QNXDialog_Spell.cpp-605-#if 0
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-432-		flags = (value == UT_TRUE) ? Pt_SELECTABLE : (Pt_BLOCKED | Pt_GHOST);
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-433-		PtSetResource(w, Pt_ARG_FLAGS, flags, Pt_SELECTABLE | Pt_BLOCKED | Pt_GHOST);
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-434-	}
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-435-}
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-436-
./wp/ap/qnx/ap_QNXDialog_Tab.cpp:437:/* TODO
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-438- direction == -1 is down
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-439- direction == 1 is up
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-440- direction == 0 is totally new value
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-441-*/
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-442-void AP_QNXDialog_Tab::_spinChanged(void)
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-542-}
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-543-
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-544-// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-545-// Listbox stuff
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-546-
./wp/ap/qnx/ap_QNXDialog_Tab.cpp:547:// TODO - This should be moved to XAP code, but the methods in which GTK and
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-548-// windows handles selection/deselection differ so much, it's easier just to
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-549-// code up the hooks directly.
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-550-
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-551-/*static*/ int AP_QNXDialog_Tab::s_list_select(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
./wp/ap/qnx/ap_QNXDialog_Tab.cpp-552-{
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-221-	}
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-222-}        
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-223-
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-224-void AP_QNXDialog_WordCount::event_OK(void)
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-225-{
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp:226:	// TODO save out state of radio items
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-227-	m_answer = AP_Dialog_WordCount::a_OK;
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-228-	done = 1;
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-229-	destroy();
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-230-}
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-231-
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-309-#define MARGIN_SIZE 10 
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-310-	PtSetArg(&args[n++], Pt_ARG_MARGIN_HEIGHT, MARGIN_SIZE, 0);
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-311-	PtSetArg(&args[n++], Pt_ARG_MARGIN_WIDTH, MARGIN_SIZE, 0);
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-312-	PtWidget_t *hbox = PtCreateWidget(PtGroup, m_windowMain, n, args);
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-313-
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp:314:	/* TODO: Add in a checkbox and spinner at the top here, and
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-315-	         Remove the Statistics stuff
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-316-	*/
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-317-	m_pAutocheck = NULL;
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-318-	m_pAutospin = NULL;
./wp/ap/qnx/ap_QNXDialog_WordCount.cpp-319-
./wp/ap/qnx/ap_QNXFrame.cpp-133-	//
./wp/ap/qnx/ap_QNXFrame.cpp-134-	// Each Toolbar will also get a ViewListener so that
./wp/ap/qnx/ap_QNXFrame.cpp-135-	// it can update toggle buttons, and other state-indicating
./wp/ap/qnx/ap_QNXFrame.cpp-136-	// controls on it.
./wp/ap/qnx/ap_QNXFrame.cpp-137-	//
./wp/ap/qnx/ap_QNXFrame.cpp:138:	// TODO we ***really*** need to re-do the whole scrollbar thing.
./wp/ap/qnx/ap_QNXFrame.cpp:139:	// TODO we have an addScrollListener() using an m_pScrollObj
./wp/ap/qnx/ap_QNXFrame.cpp:140:	// TODO and a View-Listener, and a bunch of other widget stuff.
./wp/ap/qnx/ap_QNXFrame.cpp:141:	// TODO and its very confusing.
./wp/ap/qnx/ap_QNXFrame.cpp-142-	pScrollObj = new AV_ScrollObj(this,_scrollFuncX,_scrollFuncY);
./wp/ap/qnx/ap_QNXFrame.cpp-143-	ENSUREP(pScrollObj);
./wp/ap/qnx/ap_QNXFrame.cpp-144-	pViewListener = new ap_ViewListener(this);
./wp/ap/qnx/ap_QNXFrame.cpp-145-	ENSUREP(pViewListener);
./wp/ap/qnx/ap_QNXFrame.cpp-146-	pScrollbarViewListener = new ap_Scrollbar_ViewListener(this,pView);
./wp/ap/qnx/ap_QNXFrame.cpp-155-
./wp/ap/qnx/ap_QNXFrame.cpp-156-	nrToolbars = m_vecToolbarLayoutNames.getItemCount();
./wp/ap/qnx/ap_QNXFrame.cpp-157-	UT_uint32 k;
./wp/ap/qnx/ap_QNXFrame.cpp-158-	for (k=0; k < nrToolbars; k++)
./wp/ap/qnx/ap_QNXFrame.cpp-159-	{
./wp/ap/qnx/ap_QNXFrame.cpp:160:		// TODO Toolbars are a frame-level item, but a view-listener is
./wp/ap/qnx/ap_QNXFrame.cpp:161:		// TODO a view-level item.  I've bound the toolbar-view-listeners
./wp/ap/qnx/ap_QNXFrame.cpp:162:		// TODO to the current view within this frame and have code in the
./wp/ap/qnx/ap_QNXFrame.cpp:163:		// TODO toolbar to allow the view-listener to be rebound to a different
./wp/ap/qnx/ap_QNXFrame.cpp:164:		// TODO view.  in the future, when we have support for multiple views
./wp/ap/qnx/ap_QNXFrame.cpp:165:		// TODO in the frame (think splitter windows), we will need to have
./wp/ap/qnx/ap_QNXFrame.cpp:166:		// TODO a loop like this to help change the focus when the current
./wp/ap/qnx/ap_QNXFrame.cpp:167:		// TODO view changes.
./wp/ap/qnx/ap_QNXFrame.cpp-168-		
./wp/ap/qnx/ap_QNXFrame.cpp-169-		EV_QNXToolbar * pQNXToolbar = (EV_QNXToolbar *)m_vecToolbars.getNthItem(k);
./wp/ap/qnx/ap_QNXFrame.cpp-170-		pQNXToolbar->bindListenerToView(pView);
./wp/ap/qnx/ap_QNXFrame.cpp-171-	}
./wp/ap/qnx/ap_QNXFrame.cpp-172-
./wp/ap/qnx/ap_QNXFrame.cpp-233-#if 1
./wp/ap/qnx/ap_QNXFrame.cpp-234-	/*
./wp/ap/qnx/ap_QNXFrame.cpp-235-	  UPDATE:  this code is back, but I'm leaving these comments as
./wp/ap/qnx/ap_QNXFrame.cpp-236-	  an audit trail.  See bug 99.  This only happens when loading
./wp/ap/qnx/ap_QNXFrame.cpp-237-	  a document into an empty window -- the case where a frame gets
./wp/ap/qnx/ap_QNXFrame.cpp:238:	  reused.  TODO consider putting an expose into ap_EditMethods.cpp
./wp/ap/qnx/ap_QNXFrame.cpp-239-	  instead of a draw() here.
./wp/ap/qnx/ap_QNXFrame.cpp-240-	*/
./wp/ap/qnx/ap_QNXFrame.cpp-241-	
./wp/ap/qnx/ap_QNXFrame.cpp-242-	/*
./wp/ap/qnx/ap_QNXFrame.cpp-243-	  I've removed this once again.  (Eric)  I replaced it with a call
./wp/ap/qnx/ap_QNXFrame.cpp-370-
./wp/ap/qnx/ap_QNXFrame.cpp-371-
./wp/ap/qnx/ap_QNXFrame.cpp-372-AP_QNXFrame::AP_QNXFrame(XAP_QNXApp * app)
./wp/ap/qnx/ap_QNXFrame.cpp-373-	: XAP_QNXFrame(app)
./wp/ap/qnx/ap_QNXFrame.cpp-374-{
./wp/ap/qnx/ap_QNXFrame.cpp:375:	// TODO
./wp/ap/qnx/ap_QNXFrame.cpp-376-	m_pData = NULL;
./wp/ap/qnx/ap_QNXFrame.cpp-377-}
./wp/ap/qnx/ap_QNXFrame.cpp-378-
./wp/ap/qnx/ap_QNXFrame.cpp-379-AP_QNXFrame::AP_QNXFrame(AP_QNXFrame * f)
./wp/ap/qnx/ap_QNXFrame.cpp-380-	: XAP_QNXFrame((XAP_QNXFrame *)(f))
./wp/ap/qnx/ap_QNXFrame.cpp-381-{
./wp/ap/qnx/ap_QNXFrame.cpp:382:	// TODO
./wp/ap/qnx/ap_QNXFrame.cpp-383-	m_pData = NULL;
./wp/ap/qnx/ap_QNXFrame.cpp-384-}
./wp/ap/qnx/ap_QNXFrame.cpp-385-
./wp/ap/qnx/ap_QNXFrame.cpp-386-AP_QNXFrame::~AP_QNXFrame(void)
./wp/ap/qnx/ap_QNXFrame.cpp-387-{
./wp/ap/qnx/ap_QNXFrame.cpp-417-{
./wp/ap/qnx/ap_QNXFrame.cpp-418-    UT_Bool *bShowBar = static_cast<AP_FrameData*> (m_pData)->m_bShowBar;
./wp/ap/qnx/ap_QNXFrame.cpp-419-
./wp/ap/qnx/ap_QNXFrame.cpp-420-    for (UT_uint32 i = 0; i < m_vecToolbarLayoutNames.getItemCount(); i++)
./wp/ap/qnx/ap_QNXFrame.cpp-421-    {
./wp/ap/qnx/ap_QNXFrame.cpp:422:        // TODO: The two next lines are here to bind the EV_Toolbar to the
./wp/ap/qnx/ap_QNXFrame.cpp-423-        // AP_FrameData, but their correct place are next to the toolbar creation (JCA)
./wp/ap/qnx/ap_QNXFrame.cpp-424-        EV_QNXToolbar * pQNXToolbar = static_cast<EV_QNXToolbar *> (m_vecToolbars.getNthItem(i));
./wp/ap/qnx/ap_QNXFrame.cpp-425-        static_cast<AP_FrameData*> (m_pData)->m_pToolbar[i] = pQNXToolbar;
./wp/ap/qnx/ap_QNXFrame.cpp-426-        toggleBar(i, bShowBar[i]);
./wp/ap/qnx/ap_QNXFrame.cpp-427-    }
./wp/ap/qnx/ap_QNXFrame.cpp-458-	UT_DEBUGMSG(("Frame: _loadDocument \n"));
./wp/ap/qnx/ap_QNXFrame.cpp-459-	// are we replacing another document?
./wp/ap/qnx/ap_QNXFrame.cpp-460-	if (m_pDoc)
./wp/ap/qnx/ap_QNXFrame.cpp-461-	{
./wp/ap/qnx/ap_QNXFrame.cpp-462-		// yep.  first make sure it's OK to discard it, 
./wp/ap/qnx/ap_QNXFrame.cpp:463:		// TODO: query user if dirty...
./wp/ap/qnx/ap_QNXFrame.cpp-464-	}
./wp/ap/qnx/ap_QNXFrame.cpp-465-
./wp/ap/qnx/ap_QNXFrame.cpp-466-	// load a document into the current frame.
./wp/ap/qnx/ap_QNXFrame.cpp-467-	// if no filename, create a new document.
./wp/ap/qnx/ap_QNXFrame.cpp-468-
./wp/ap/qnx/ap_QNXFrame.cpp-759-}
./wp/ap/qnx/ap_QNXFrame.cpp-760-
./wp/ap/qnx/ap_QNXFrame.cpp-761-//This might be the place to do our co-ordinate conversions ...
./wp/ap/qnx/ap_QNXFrame.cpp-762-void AP_QNXFrame::translateDocumentToScreen(UT_sint32 &x, UT_sint32 &y)
./wp/ap/qnx/ap_QNXFrame.cpp-763-{
./wp/ap/qnx/ap_QNXFrame.cpp:764:	printf("TODO: Translate Document To Screen %d,%d \n", x, y);
./wp/ap/qnx/ap_QNXFrame.cpp-765-}
./wp/ap/qnx/ap_QNXFrame.cpp-766-
./wp/ap/qnx/ap_QNXFrame.cpp-767-PtWidget_t * AP_QNXFrame::_createStatusBarWindow(void)
./wp/ap/qnx/ap_QNXFrame.cpp-768-{
./wp/ap/qnx/ap_QNXFrame.cpp-769-	AP_QNXStatusBar * pQNXStatusBar = new AP_QNXStatusBar(this);
./wp/ap/qnx/ap_QNXFrame.cpp-782-}
./wp/ap/qnx/ap_QNXFrame.cpp-783-
./wp/ap/qnx/ap_QNXFrame.cpp-784-void AP_QNXFrame::_setWindowIcon(void)
./wp/ap/qnx/ap_QNXFrame.cpp-785-{
./wp/ap/qnx/ap_QNXFrame.cpp-786-#if 0
./wp/ap/qnx/ap_QNXFrame.cpp:787:	UT_DEBUGMSG(("TODO: Fix the setting of the ICON "));
./wp/ap/qnx/ap_QNXFrame.cpp-788-
./wp/ap/qnx/ap_QNXFrame.cpp-789-	// attach program icon to window
./wp/ap/qnx/ap_QNXFrame.cpp-790-	PtWidget_t * window = getTopLevelWindow();
./wp/ap/qnx/ap_QNXFrame.cpp-791-	UT_ASSERT(window);
./wp/ap/qnx/ap_QNXFrame.cpp-792-
./wp/ap/qnx/ap_QNXFrame.cpp-833-        pFrameData->m_pToolbar[iBarNb]->hide();
./wp/ap/qnx/ap_QNXFrame.cpp-834-    }
./wp/ap/qnx/ap_QNXFrame.cpp-835-}
./wp/ap/qnx/ap_QNXFrame.cpp-836-
./wp/ap/qnx/ap_QNXFrame.cpp-837-void AP_QNXFrame::toggleRuler(UT_Bool bRulerOn) {
./wp/ap/qnx/ap_QNXFrame.cpp:838:	UT_DEBUGMSG(("TODO: Toggle ruler code "));
./wp/ap/qnx/ap_QNXFrame.cpp-839-}
./wp/ap/qnx/ap_QNXFrame.cpp-840-
./wp/ap/qnx/ap_QNXFrame.cpp-841-void AP_QNXFrame::toggleStatusBar(UT_Bool bStatusBarOn) {
./wp/ap/qnx/ap_QNXFrame.cpp-842-    AP_FrameData *pFrameData = static_cast<AP_FrameData *> (getFrameData());
./wp/ap/qnx/ap_QNXFrame.cpp-843-    UT_ASSERT(pFrameData);
./wp/ap/qnx/ap_QNXLeftRuler.cpp-194-	AP_QNXLeftRuler * pQNXLeftRuler = (AP_QNXLeftRuler *)data;
./wp/ap/qnx/ap_QNXLeftRuler.cpp-195-
./wp/ap/qnx/ap_QNXLeftRuler.cpp-196-	if (pQNXLeftRuler) {
./wp/ap/qnx/ap_QNXLeftRuler.cpp-197-		UT_uint32 iHeight, iWidth, *piBWidth;
./wp/ap/qnx/ap_QNXLeftRuler.cpp-198-
./wp/ap/qnx/ap_QNXLeftRuler.cpp:199:		//TODO: We should probably just measure the proper widget.
./wp/ap/qnx/ap_QNXLeftRuler.cpp-200-
./wp/ap/qnx/ap_QNXLeftRuler.cpp-201-		//Do this since this size is the size of the group not the widget
./wp/ap/qnx/ap_QNXLeftRuler.cpp-202-		PtGetResource(w, Pt_ARG_BORDER_WIDTH, &piBWidth, sizeof(piBWidth)); 
./wp/ap/qnx/ap_QNXLeftRuler.cpp-203-
./wp/ap/qnx/ap_QNXLeftRuler.cpp-204-		iWidth = cbinfo->new_size.lr.x - cbinfo->new_size.ul.x - (2 * *piBWidth); 
./wp/ap/qnx/ap_QNXPrefs.cpp-66-
./wp/ap/qnx/ap_QNXPrefs.cpp-67-	if (!m_bUseEnvLocale)
./wp/ap/qnx/ap_QNXPrefs.cpp-68-		return;							// nothing to do...
./wp/ap/qnx/ap_QNXPrefs.cpp-69-
./wp/ap/qnx/ap_QNXPrefs.cpp-70-#if 1
./wp/ap/qnx/ap_QNXPrefs.cpp:71:	// TODO use various POSIX env variables
./wp/ap/qnx/ap_QNXPrefs.cpp:72:	// TODO (such as LANG and LC_*) to compute
./wp/ap/qnx/ap_QNXPrefs.cpp:73:	// TODO a name in our locale namespace
./wp/ap/qnx/ap_QNXPrefs.cpp:74:	// TODO (see .../src/wp/ap/xp/ap_*_Languages.h)
./wp/ap/qnx/ap_QNXPrefs.cpp-75-
./wp/ap/qnx/ap_QNXPrefs.cpp-76-        // make a copy of the current locale so we can set it back
./wp/ap/qnx/ap_QNXPrefs.cpp-77-	char *old_locale = UT_strdup(setlocale(LC_ALL, NULL));
./wp/ap/qnx/ap_QNXPrefs.cpp-78-
./wp/ap/qnx/ap_QNXPrefs.cpp-79-	// this will set our current locale information
./wp/ap/qnx/ap_QNXToolbar_FontCombo.cpp-45-													 XAP_Toolbar_Id id)
./wp/ap/qnx/ap_QNXToolbar_FontCombo.cpp-46-	: EV_Toolbar_Control(pToolbar/*,id*/)
./wp/ap/qnx/ap_QNXToolbar_FontCombo.cpp-47-{
./wp/ap/qnx/ap_QNXToolbar_FontCombo.cpp-48-	UT_ASSERT(id==AP_TOOLBAR_ID_FMT_FONT);
./wp/ap/qnx/ap_QNXToolbar_FontCombo.cpp-49-
./wp/ap/qnx/ap_QNXToolbar_FontCombo.cpp:50:	m_nPixels = 175;		// TODO: do a better calculation
./wp/ap/qnx/ap_QNXToolbar_FontCombo.cpp:51:	m_nLimit = 32;			// TODO: honor this?  :)
./wp/ap/qnx/ap_QNXToolbar_FontCombo.cpp-52-}
./wp/ap/qnx/ap_QNXToolbar_FontCombo.cpp-53-
./wp/ap/qnx/ap_QNXToolbar_FontCombo.cpp-54-AP_QNXToolbar_FontCombo::~AP_QNXToolbar_FontCombo(void)
./wp/ap/qnx/ap_QNXToolbar_FontCombo.cpp-55-{
./wp/ap/qnx/ap_QNXToolbar_FontCombo.cpp-56-	// nothing to purge.  contents are static strings
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-35-													 XAP_Toolbar_Id id)
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-36-	: EV_Toolbar_Control(pToolbar/*,id*/)
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-37-{
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-38-	UT_ASSERT(id==AP_TOOLBAR_ID_FMT_SIZE);
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-39-
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp:40:	m_nPixels = 40;		// TODO: do a better calculation
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-41-	m_nLimit = 4;
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-42-}
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-43-
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-44-AP_QNXToolbar_SizeCombo::~AP_QNXToolbar_SizeCombo(void)
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-45-{
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-69-	m_vecContents.addItem((void *) "28");
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-70-	m_vecContents.addItem((void *) "36");
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-71-	m_vecContents.addItem((void *) "48");
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-72-	m_vecContents.addItem((void *) "72");
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-73-
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp:74:	// TODO: may want to populate this based on current font instead?
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-75-	return UT_TRUE;
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-76-}
./wp/ap/qnx/ap_QNXToolbar_SizeCombo.cpp-77-
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-36-													 XAP_Toolbar_Id id)
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-37-	: EV_Toolbar_Control(pToolbar/*,id*/)
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-38-{
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-39-	UT_ASSERT(id==AP_TOOLBAR_ID_FMT_STYLE);
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-40-
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp:41:	m_nPixels = 90;		// TODO: do a better calculation
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-42-	m_nLimit = 20;
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-43-}
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-44-
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-45-AP_QNXToolbar_StyleCombo::~AP_QNXToolbar_StyleCombo(void)
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-46-{
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-63-	m_vecContents.addItem((void *) "Heading 2");
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-64-	m_vecContents.addItem((void *) "Heading 3");
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-65-	m_vecContents.addItem((void *) "Plain Text");
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-66-	m_vecContents.addItem((void *) "Block Text");
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-67-#else
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp:68:	// TODO: need a view/doc pointer to get this right
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-69-	// ALSO: will need to repopulate as new styles added
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-70-	// HYP:  only call this method from shared code? 
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-71-	const char * szName;
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-72-	const PD_Style * pStyle;
./wp/ap/qnx/ap_QNXToolbar_StyleCombo.cpp-73-
./wp/ap/qnx/ap_QNXToolbar_ZoomCombo.cpp-35-													 XAP_Toolbar_Id id)
./wp/ap/qnx/ap_QNXToolbar_ZoomCombo.cpp-36-	: EV_Toolbar_Control(pToolbar/*,id*/)
./wp/ap/qnx/ap_QNXToolbar_ZoomCombo.cpp-37-{
./wp/ap/qnx/ap_QNXToolbar_ZoomCombo.cpp-38-	UT_ASSERT(id==AP_TOOLBAR_ID_ZOOM);
./wp/ap/qnx/ap_QNXToolbar_ZoomCombo.cpp-39-
./wp/ap/qnx/ap_QNXToolbar_ZoomCombo.cpp:40:	m_nPixels = 60;		// TODO: do a better calculation
./wp/ap/qnx/ap_QNXToolbar_ZoomCombo.cpp-41-	m_nLimit = 6;
./wp/ap/qnx/ap_QNXToolbar_ZoomCombo.cpp-42-}
./wp/ap/qnx/ap_QNXToolbar_ZoomCombo.cpp-43-
./wp/ap/qnx/ap_QNXToolbar_ZoomCombo.cpp-44-AP_QNXToolbar_ZoomCombo::~AP_QNXToolbar_ZoomCombo(void)
./wp/ap/qnx/ap_QNXToolbar_ZoomCombo.cpp-45-{
./wp/ap/qnx/ap_QNXTopRuler.cpp-127-		*y = area->pos.y;
./wp/ap/qnx/ap_QNXTopRuler.cpp-128-}
./wp/ap/qnx/ap_QNXTopRuler.cpp-129-
./wp/ap/qnx/ap_QNXTopRuler.cpp-130-void * AP_QNXTopRuler::getRootWindow(void)
./wp/ap/qnx/ap_QNXTopRuler.cpp-131-{
./wp/ap/qnx/ap_QNXTopRuler.cpp:132:	// TODO move this function somewhere more logical, like
./wp/ap/qnx/ap_QNXTopRuler.cpp:133:	// TODO the XAP_Frame level, since that's where the
./wp/ap/qnx/ap_QNXTopRuler.cpp:134:	// TODO root window is common to all descendants.
./wp/ap/qnx/ap_QNXTopRuler.cpp-135-	if (m_rootWindow)
./wp/ap/qnx/ap_QNXTopRuler.cpp-136-		return m_rootWindow;
./wp/ap/qnx/ap_QNXTopRuler.cpp-137-
./wp/ap/qnx/ap_QNXTopRuler.cpp-138-	if (m_pFrame)
./wp/ap/qnx/ap_QNXTopRuler.cpp-139-		return (m_rootWindow = ((XAP_QNXFrame *)m_pFrame)->getTopLevelWindow()) ;
./wp/ap/qnx/ap_QNXTopRuler.cpp-281-	AP_QNXTopRuler * pQNXTopRuler = (AP_QNXTopRuler *)data;
./wp/ap/qnx/ap_QNXTopRuler.cpp-282-
./wp/ap/qnx/ap_QNXTopRuler.cpp-283-	if (pQNXTopRuler) {
./wp/ap/qnx/ap_QNXTopRuler.cpp-284-		UT_uint32 iHeight, iWidth, *piBWidth;
./wp/ap/qnx/ap_QNXTopRuler.cpp-285-
./wp/ap/qnx/ap_QNXTopRuler.cpp:286:		//TODO: We should probably just measure the proper widget.
./wp/ap/qnx/ap_QNXTopRuler.cpp-287-
./wp/ap/qnx/ap_QNXTopRuler.cpp-288-		//Do this since this size is the size of the group not the widget
./wp/ap/qnx/ap_QNXTopRuler.cpp-289-		PtGetResource(w, Pt_ARG_BORDER_WIDTH, &piBWidth, sizeof(piBWidth)); 
./wp/ap/qnx/ap_QNXTopRuler.cpp-290-
./wp/ap/qnx/ap_QNXTopRuler.cpp-291-		iWidth = cbinfo->new_size.lr.x - cbinfo->new_size.ul.x - (2 * *piBWidth); 
./af/xap/qnx/xap_QNXFrame.h-94-	virtual void				_createTopLevelWindow(void);
./af/xap/qnx/xap_QNXFrame.h-95-	virtual void				_setWindowIcon(void) = 0;
./af/xap/qnx/xap_QNXFrame.h-96-
./af/xap/qnx/xap_QNXFrame.h-97-	virtual EV_Toolbar *		_newToolbar (XAP_App *app, XAP_Frame *frame, const char *, const char *);
./af/xap/qnx/xap_QNXFrame.h-98-	
./af/xap/qnx/xap_QNXFrame.h:99:	// TODO see why ev_QNXKeyboard has lowercase prefix...
./af/xap/qnx/xap_QNXFrame.h-100-	XAP_QNXApp *				m_pQNXApp;
./af/xap/qnx/xap_QNXFrame.h-101-	EV_QNXMenuBar *				m_pQNXMenu;
./af/xap/qnx/xap_QNXFrame.h-102-	EV_QNXMenuPopup *			m_pQNXPopup; /* only valid while a context popup is up */
./af/xap/qnx/xap_QNXFrame.h-103-	
./af/xap/qnx/xap_QNXFrame.h-104-	PtWidget_t *				m_wTopLevelWindow;
